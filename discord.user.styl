/* ==UserStyle==
@name           Discord
@namespace      github.com/openstyles/stylus
@version        1.1.1
@description    A new userstyle
@author         Me
@preprocessor stylus

@var checkbox font-awesome         "Font Awesome as icons"   1

@var checkbox guilds-horizontal    "Guilds horizontal"       1
@var text     guilds-size          "Guilds size"             24px
@var checkbox sidebar-overlay      "Sidebar overlay"         1
@var text     sidebar-width        "Sidebar width"           228px

@var checkbox messages-alt         "Cozy chat alt. look"     1
@var text     avatar-size          "Avatar size"             var(--font-size)
@var text     avatar-spacing       "Avatar spacing"          1ch
@var text     avatar-border-radius "Avatar border radius"    6px
@var checkbox avatar-status-border "Avatar status as border" 1
@var text     avatar-stroke-size   "Avatar stroke size"      3px

@var text     search-results-width "Search results width"    345px
==/UserStyle== */

// Variables
vendors = official;
$small-screen = 768px;
$select-shadow = inset 0 1px 2px rgba(0, 0, 0, 0.1);
$select-size = 16px;
$i = !important;

// Stylus
svar(var) {
	s('var(--%s)', var);
}

cond(n, yes, no) {
	(n == 0 ? no : yes) $i;
}

sel-cond(sel, pos) {
	pos ? s('%s-%s', sel, pos) : sel;
}

color-a(n, bright = true) {
	s = bright ? -2 : null;
	n = n > 6 ? n - 8 : n;

	s('hsla(var(--color%s-h),	var(--colorscheme-s%s),	var(--colorscheme-l%s), var(--bg-opacity))', n, s, s);
}

// Appearance
bg(n =) {
	background-color: s('var(--bg%s)', n) $i;

	if (n == -tr || n == -tr2 || n == -tr3) {
		backdrop-filter: var(--popup-filter) $i;
	}
}

fg(n =) {
	color: s('var(--fg%s)', n) $i;
}

bgc(n1 =, n2 =) {
	bg(n1);
	fg(n2);
}

hl() {
	background-color: var(--hl) $i;
	color: var(--hl-fg) $i;
}

accent() {
	background-color: var(--accent) $i;
	color: var(--accent-fg) $i;
}

clr(n) {
	color: s('var(--color%s)', n) $i;
}

lnh() {
	line-height: var(--line-height) $i;
}

pad(pos =, n = 1) {
	{sel-cond(padding, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

mar(pos =, n = 1) {
	{sel-cond(margin, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

shd(n) {
	box-shadow: cond(n, s('var(--shadow-%s)', n), none);
}

rad(n = 1) {
	border-radius: cond(n, var(--border-radius), 0);
}

brd(pos =, color = border) {
	if (color) {
		color = svar(color);
	}

	{sel-cond(border, pos)}: \
		(color == 0 ? none : pos == 0 ? none : var(--border-width) solid color) $i;
	if (!pos) {
		rad(pos);
	}
}

// Position
box(w, h = w) {
	width: w $i;
	height: h $i;
}

flex(display = flex, alignment = center, justification =) {
	display: display $i;
	align-items: alignment $i;
	justify-content: justification $i;
}

// Animation
anim(name =, func = ) {
	@media (prefers-reduced-motion: no-preference) {
		{name ? animation : transition}: name var(--trans-dur) func $i;
	}
}

dropfade() {
	anim(dropfade, cubic-bezier(0.2, 0.9, 0.6, 1));
}

// Focus
focus(p = focus) {
	anim();

	&:{p} {
		border-color: var(--hl) $i;
		box-shadow: var(--shadow-ins) var(--hl) $i;
		outline: none $i;
	}
}

header-focus(class = page-focus) {
	.{class} & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}

	// Stylus is unable to recognise :where()
	:root:not(:-moz-window-inactive) & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}
}

// Text
replace-text(content =, text-color = fg, pos = after) {
	color: transparent $i;
	letter-spacing: -9999px $i;

	if (content) { // Replace
		&::{pos} {
			content: content $i;
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	} else { // Hide
		* {
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	}
}

hide-chars(amount, pos, bg =) {
	margin-{pos}: s('-%sch', amount) $i;
	position: relative $i;

	element = pos == left ? before : after;
	&::{element} {
		content: '' $i;
		position: absolute $i;
		inset: 0;
		box(s('%sch', amount), calc(1em * var(--line-height)));
		bg(bg);
	}
}

fa(char) {
	font-size: 0 $i;

	&::before {
		content: s('"\%s"', char) $i;
		font: var(--font-size) 'Font Awesome 6 Free' $i;
		font-weight: 600 $i;
	}
}

// Normalisation
disabled() {
	&:disabled {
		opacity: 0.5 $i;
		cursor: not-allowed $i;
	}
}

normalise-select() {
	appearance: none $i;
	bgc(2);
	lnh();
	background-image:
		linear-gradient(55deg, var(--bg2) 43%, transparent 45%),
		linear-gradient(125deg, transparent 53%, var(--bg2) 55%),
		linear-gradient(180deg, var(--bg2) 30%, var(--fg) 30%) $i;
	background-size: 20px 20px $i;
	background-repeat: no-repeat $i;
	background-position: right 50% $i;
	pad();
	padding-right: calc(var(--pad) + 20px) $i;
	brd();
	focus();
	disabled();
}

normalise-input() {
	bgc(2);
	lnh();
	pad();
	brd();
	focus();
	disabled();

	&::placeholder {
		fg(2);
	}
}

normalise-button() {
	bgc(2);
	lnh();
	background-image: none $i;
	padding: var(--pad) calc(var(--pad) * 2) $i;
	brd();
	cursor: pointer $i;
	focus();
	disabled();
}

normalise-color() {
	bg(2);
	pad(0);
	brd();
	box($select-size);
	focus();
	disabled();

	&::-webkit-color-swatch {
		brd(0);
		// Prevent from making it look like a radio input
		border-radius: calc(var(--border-radius) * 0.33) $i;

		&-wrapper {
			pad(0);
		}
	}
}

normalise-checkbox(label = true) {
	if (label) {
		/label {
			lnh();
			flex();
			gap: 1ch $i;
		}
	}

	appearance: none $i;
	bg(2);
	brd();
	// Prevent from making it look like a radio input
	border-radius: calc(var(--border-radius) * 0.33) $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	min-width: $select-size $i;
	focus();

	&::before, &::after {
		content: '';
		position: absolute $i;
		inset: 0;
		background-color: var(--hl) $i;
		transform-origin: 0 0 $i;
	}
	&:disabled {
		&::before, &::after {
			background-color: var(--fg2) $i;
		}
	}

	&::before {
		transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0) $i;
	}
	&:indeterminate::before {
		transform: rotate(0) translateY(37.5%) translateX(10%) scaleX(0.8) scaleY(0.25) $i;
		transition-duration: 33.3ms $i;
	}
	&::after {
		transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(0) $i;
	}

	&:checked {
		&::before {
			transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0.4) $i;
			transition-duration: 33.3ms $i;
		}
		&::after {
			transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(1.2) $i;
			transition-delay: 33.3ms $i;
			anim();
		}
	}
}

normalise-radio() {
	appearance: none $i;
	bg(2);
	brd();
	border-radius: 50% $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	focus();

	&::before {
		content: '';
		position: absolute $i;
		inset: $select-size / 5;
		background-color: var(--hl) $i;
		border-radius: 50% $i;
		transition: transform var(--trans-dur) linear $i;
		transform: scale(0) $i;
	}
	&:disabled::before {
		background-color: var(--fg2) $i;
	}
	&:checked::before {
		transition-timing-function: cubic-bezier(0, 0, 0.3, 1.5) $i;
		transform: scale(1) $i;
		anim();
	}
}

normalise-header(first = true) {
	fg();
	lnh();
	text-transform: uppercase $i;
	letter-spacing: 1px $i;
	pad(0);
	pad(bottom);
	brd(bottom);
	mar(0);
	mar(bottom);
	if (!first) {
		margin-top: calc(var(--pad) * 2) $i;
	}
}

$chat-title = 'section.container.themed'

@-moz-document domain("discord.com") {
	/**
 	 * Variables
	**/
	.theme-light, .theme-dark {
		// Settings
		settings = \
			'guilds-size',
			'sidebar-width',
			'emoji-size',
			'avatar-size',
			'avatar-spacing',
			'avatar-border-radius',
			'avatar-stroke-size',
			'search-results-width'

		for i in settings {
			\-\-{i}: convert(i);
		}

		// Background
		--background-primary: var(--bg);
		--background-secondary: var(--bg2);
		--background-secondary-alt: var(--bg3);
		--background-tertiary: var(--bg4);
		--background-accent: var(--fg);
		--background-floating: var(--bg);
		--background-nested-floating: var(--bg);

		--background-mobile-primary: var(--bg);
		--background-mobile-secondary: var(--bg2);

		--background-modifier-hover: var(--bg3);
		--background-modifier-active: var(--bg4);
		--background-modifier-selected: var(--hl);
		--background-modifier-accent: var(--border);

		--modal-background: var(--bg);
		--modal-footer-background: var(--bg2);

		--input-background: var(--bg2);
		--channeltextarea-background: var(--input-background);

		// Text
		--text-normal: var(--fg);
		--text-muted: var(--fg2);
		--text-link: var(--fg-link);
		--text-brand: var(--color4);

		--interactive-normal: var(--fg2);
		--interactive-muted: var(--fg2);
		--interactive-active: var(--hl-fg);
		--interactive-hover: var(--fg);

		--header-primary: var(--fg);
		--header-secondary: var(--fg2);
		--channels-default: var(--fg2);

		--mention-background: color-a(12);
		--mention-foreground: var(--color12);

		--channel-text-area-placeholder: var(--fg2);
		--input-placeholder-text: var(--fg2);
		--textbox-markdown-syntax: var(--fg2);

		// Info
		colors = {
			danger:   9,
			positive: 10,
			warning:  11,
			help:     12
		}
		for k, v in colors {
			clr = s('var(--color%s)', v - 8);

			--text-{k}: clr;

			--info-{k}-background: color-a(v);
			--info-{k}-foreground: var(--fg);
			--info-{k}-text: var(--fg);

			--status-{k}-background: color-a(v);
			--status-{k}-text: var(--fg);
			--status-{k}: clr;
		}

		// Shadows
		--elevation-stroke: var(--shadow-ins) var(--border);
		--elevation-low: var(--shadow-low);
		--elevation-medium: var(--shadow-mid);
		--elevation-high: var(--shadow-big);
		--guild-header-text-shadow: none;

		// Scrollbar
		for i in auto thin {
			--scrollbar-{i}-thumb: var(--fg2);
			--scrollbar-{i}-track: var(--bg2);
		}

		// Other
		--focus-primary: var(--hl);
		--brand-experiment: var(--color4);
		--brand-experiment-400: var(--color12);
		--brand-experiment-560: var(--color12);
		--brand-experiment-600: var(--color12);

		--reserve-avatar-size: var(--avatar-size);
		--reserve-pad: var(--pad);
	}

	/**
	 * Global
	**/
	// Scrollbar
	::-webkit-scrollbar {
		box(var(--scrollbar-width));

		&-thumb, &-track {
			brd(0);
			mar(0);
		}
	}

	// Icons
	icons = {
		'.toolbar': {
			'Clear search':                  f002,
			'Pinned Messages':               f08d,
			'Add Friends to DM':             f234,
			'Start Voice Call':              f095,
			'Start Video Call':              f03d,
			'Show Member List':              f007,
			'Hide Member List':              e073,
			'Inbox':                         f01c,
			'More':                          f078
		},

		'.panels > .container > .flex': {
			'Mute':                          f131,
			'Deafen':                        f130,
			'User Settings':                 f0ad
		},

		'[aria-label="Message Actions"] > .wrapper': {
			'Add Reaction':  f118,
			'Edit':          f305,
			'Reply':         f3e5,
			'Create Thread': 23,
			'More':          f104
		}

		'.form .buttons': {
			'Open sticker picker':           f249,
			'Select emoji':                  f118,
			'Send Message':                  f061
		}
	}
	for i in icons {
		{i} {
			gap: 1ch;

			if (font-awesome) {
				svg {
					display: none;
				}
			}

			for k, v in icons[i] {
				{s('[aria-label=%s]', k)} {
					if (font-awesome) {
						fa(v);
					}
					fg(2);

					&:hover {
						fg();
					}
				}
			}
		}
	}
	.panels > .container > .flex > .button {
		box(unset);

		&:hover {
			background-color: transparent;
		}
	}
	if (font-awesome) {
		.attachButton {
			fa(f055);
		}
	}
	.toolbar {
		[role="button"] {
			mar(0);
			box(unset);
		}
		[aria-label="More"] {
			order: 1;
		}
	}
	// Hidden at all times, as Font Awesome doesn't have a "gif" icon.
	[aria-label="Open GIF picker"] > .contents {
		display: none $i;
	}
	.innerButton > div { // send message
		fg(2);

		&:hover {
			fg();
		}
	}

	.tabBar {
		height: unset;
		gap: 0;

		& > div {
			background-color: transparent $i;
			fg(2);
			lnh();
			pad();
			brd(0);
			mar(0);
			min-width: unset $i;
			height: unset;

			&:hover {
				fg();
			}
			&[aria-selected="true"] {
				hl();
			}
		}

		&Container {
			brd(bottom);
		}
	}

	.markup {
		lnh();

		pre {
			mar(0);
		}
		code.inline {
			lnh();
			border-radius: var(--border-radius);
		}
	}
	.emoji {
		box(var(--font-size));
		min-height: unset $i;
	}

	// Custom avatar rounding
	.avatar > .wrapper,
	.avatarHintInner,
	.replyAvatar,
	.avatar {
		border-radius: var(--avatar-border-radius) $i;
	}
	[mask^="url(#svg-mask-avatar-status-mobile"],
	[mask^="url(#svg-mask-avatar-status-round"],
	[mask="url(#svg-mask-avatar-default)"],
	.avatar > .mask > foreignObject {
		mask: none;
		border-radius: var(--avatar-border-radius);
	}
	.avatarHoverTarget {
		border-width: var(--avatar-stroke-size);
	}
	[mask^="url(#svg-mask-status"]:not([mask$="mobile)"]),
	.avatar rect {
		rx: 50%; ry: 50%;
		stroke: var(--background-floating);
		stroke-width: var(--avatar-stroke-size);

		.userPopout & {
			x: 64; y: 64;
			stroke-width: calc(var(--avatar-stroke-size) * 1.5);
		}

		[aria-label="User Profile Modal"] & {
			x: 98; y: 98;
			stroke-width: calc(var(--avatar-stroke-size) * 2);
		}
	}

	// Avatar status border
	if (avatar-status-border) {
		.avatar, .avatar > .wrapper {
			// Size
			.privateChannels &,
			.peopleColumn &,
			.members &,
			.panels & {
				--avatar-border-size: 2px;
			}
			[aria-modal] &,
			.accountProfileCard & {
				--avatar-border-size: 6px;
			}

			// Color
			--avatar-border-color: var(--text-muted);
			&[aria-label$="mobile"]		{ --avatar-border-color: var(--brand-experiment); }
			&[aria-label$="Online"]		{ --avatar-border-color: var(--text-positive); }
			&[aria-label$="Idle"]			{ --avatar-border-color: var(--text-warning); }
			&[aria-label$="Disturb"]	{ --avatar-border-color: var(--text-danger); }

			// Border
			border: var(--avatar-border-size) solid var(--avatar-border-color);

			rect {
				display: none;
			}
		}

		// Fixes
		.avatar {
			.privateChannels &,
			.members & {
				border: none;
				width: 36px;
			}
			&Stack > img {
				border: none;
			}
		}
	}

	/**
	 * Hide elements
	**/
	// I. Buttons
	#message-actions-tts,
	#user-context-call,
	#user-context-note,
	#user-context-message-user,
	#user-context-invite-to-server,
	#guild-header-popout-invite-people,
	#gif-picker-tab-panel .backButton,
	[href="https://support.discord.com"],
	[aria-label="Notification Settings"],
	[aria-label="Threads"][role="button"],
	[aria-label="Show User Profile (Unavailable)"],
	#channels .children > :not(.mentionsBadge),
	#messagesNavigationDescription + [id^="chat-messages"] + .containerExpanded,
	#search-results .buttonsContainer,
	.sidebar .positionedContainer, // Unread bar
	.privateChannels > .searchBar,
	.peopleColumn > .searchBar,
	.peopleListItem .actions,
	.sidebar .actionButtons,
	.guildIconV2Container, // Sidebar boost status
	.welcomeCTA,

	// II. Nitro
	.shinyButton,
	.aboutMeGuildIcon,
	.bannerNitroUpsell,
	.avatarDecoration,
	.subscribeTooltipWrapper,
	.upsell,
	.upsellContainer,
	.upsellTooltipWrapper,
	.upsellOverlayContainer,
	.premiumPromo,
	.premiumUpsell,
	.premiumIconWrapper,
	.premiumInlineNotice,
	.premiumFeatureBorder,
	.customizationSection:has(> .birthdayFeatureBorder), // Profiles
	[href="/store"], // Private channels "Nitro" tab
	[aria-label="Send a gift"], // Chat text area button
	[aria-label="Add Super Reaction"],
	#message-add-reaction-1, // ^
	#message-actions-add-reaction-1, // ^
	#user-settings-cog-Billing,
	#user-settings-cog-Discord_Nitro,
	#user-settings-cog-Subscriptions,
	#user-settings-cog-Nitro_Server_Boost,
	#user-settings-cog-Library_Inventory,
	#guild-header-popout [role="group"]:first-child, // Server Boost
	#guild-header-popout [role="group"]:first-child + div,
	[aria-label="Connections"] + div + div,
	[aria-label="Connections"] + div + div + div,
	[aria-label="Nitro"],
	[aria-label="Nitro"] + div,
	[aria-label="Subscriptions"],
	[aria-label="Gift Inventory"],
	[aria-label="Gift Inventory"] + div,

	// III. Made-obsolete gradients/shadows
	.children::after,
	.tabBody::before,
	.content[style="position: relative;"] > div > ::before,

	// IV. Unread indicators
	.sidebar .container:is(.top, .bottom),
	.unreadMentionsIndicatorBottom,
	.unreadMentionsIndicatorTop,

	// V. Other elements
	.guilds > .tree > div > .listItem:nth-last-child(2),
	.guilds > .tree > div > .listItem:nth-last-child(3),
	.guilds > .tree > div > .listItem:nth-last-child(4),
	.roleIcon,
	.protip,
	.socialLinks,
	.typingDots .dots,
	.emptyChannelIcon,
	.threadSuggestionBar,
	[data-list-id="chat-messages"] > [class^="groupStart"], // blocked
	.userPopoutInner .lastSection,
	[class*="cozy-"] .repliedMessage > .username,
	.communityInfoContainer,
	.guildIconContainer,
	.nowPlayingColumn,
	.channelNotice
	{
			display: none $i;
	}

	// Nitro pt. II
	#profile-customization-tab .headingLgSemibold {
		margin-bottom: 20px;
	}

	// GIFs / emoji tabs
	.resizeHandle + div {
		grid-template-rows: unset;

		& > nav {
			display: none;
		}
	}

	// Username on sidebar
	.panels {
		.nameTag {
			display: none;
		}

		& > .container {
			justify-content: space-between
		}
	}
	.withTagAsButton, .withTagless {
		min-width: unset;
	}

	// Banner
	.sidebar {
		.animatedContainer {
			display: none;
		}
		.headerContent {
			filter: none;
			color: var(--header-primary) $i;
		}
		[style="height: 84px;"] {
			height: 0 $i;
		}
	}

	// V. Fixes
	.typingDots .text {
		mar(left, 0);
	}
	.role {
		fg();
	}

	/**
	 * Sidebar
	**/
	$sidebar = {
		channel:          'li'
		channel-selected: '[class*="modeSelected-"]'
		channel-unread:   '[class*="modeUnread-"]'
		channel-category: '.wrapperCommon-I1TMDb'
	}

	.sidebar {
		// Almost no animation below that - lags too much
		--trans-dur: 300ms;
		width: var(--sidebar-width);

		@media (max-width: $small-screen) {
			width: 0;
			min-width: 0;
			anim();

			.guilds:hover + .base &,
			.guilds + .base &:hover {
				width: var(--sidebar-width) $i;
			}

			if (sidebar-overlay) {
				background-color: var(--bg-tr) $i;
				position: absolute;
				top: var(--header-h);
				bottom: 0;
				z-index: 101;

				& > * {
					background-color: transparent $i;
				}
			}
		}

		.header {
			background-color: transparent $i;
			pad(0);
			shd(0);
			height: unset $i;

			&Content {
				height: unset;
			}
			&Children {
				display: none;
			}

			.name {
				normalise-header();
				pad(top);
				mar(bottom, 0);
				mar(left);
				mar(right);
			}
		}
	}
	.sidebarRegionScroller,
	.content > .sidebar > * {
		brd(right);
	}

	// Channels
	#channels {
		pad(0);

		&::-webkit-scrollbar,
		.iconContainer,
		.unread,

		// "Browse Channels"
		[style="height: 12px;"],
		& > ul > [role="button"],
		.sectionDivider {
			display: none;
		}

		// Channel
		{$sidebar[channel]} {
			pad(0);

			& > div {
				pad(0);
				height: unset;

				&:not({$sidebar[channel-selected]}):hover .link {
					background-color: transparent $i;
				}
			}
			& > div:not([class]) { // voice
				& > div {
					pad(0);
					mar(0);
				}
				.name {
					fa(f095);
					font-size: var(--font-size) $i;

					&::before {
						margin-right: 1ch;
					}
				}
			}
		}
		// Special case for threads
		& > ul > li > div {
			mar(0);
		}
		{$sidebar[channel-selected]} {
			.link {
				cursor: default;
			}
		}
		{$sidebar[channel-unread]} {
			.name {
				color: var(--hl);
			}
		}
		.link {
			pad();
			brd(0);
		}

		// voice
		.draggable {
			&,
			& > div {
				height: unset;
			}
			.content {
				brd(0);
				mar(0);
			}
			& > :not([class*="selected-"]) > .content {
				background-color: transparent;
			}
			.avatar {
				mar();
			}
		}

		// Category
		.mainContent {
			normalise-header(false);
			mar(left);
			mar(right);
			flex();
			flex-direction: row-reverse;
		}
		.arrow {
			position: unset;
			box(var(--font-size));
		}
	}

	.privateChannels {
		& > :last-child::-webkit-scrollbar,
		[style="height: 8px;"],
		&HeaderContainer {
			display: none;
		}

		.channel {
			pad(0);
			brd(0);
			mar(0);
			max-width: unset;

			& > div {
				background-color: transparent $i;

				&:hover {
					fg();
				}

				&[class*="selected-"] {
					hl();
				}
			}
		}
		.layout {
			pad();
			height: unset;
		}
		.avatar {
			mar(right);
		}
	}

	.panels {
		brd(top);

		& > .container {
			pad();
			mar(0);
			height: unset;
		}
	}

	// Servers sidebar
	$guilds = {
		scroller:       '[class*="scroller-"]'
		guild:          '.pill:not(:empty) + div > [data-dnd-name]'
		guild-selected: '[class*="selected-"]'
	}

	.guilds {
		width: calc(var(--guilds-size) + var(--pad) * 2) $i;

		{$guilds[scroller]} {
			bg(2);
			header-focus();
			padding-top: calc(var(--pad) / 2) $i;
			brd(right);

			// Scrollbar on hover
			@supports not (-moz-appearance: none) {
				&:hover > div {
					margin-right: -1px;
				}
			}

			&::-webkit-scrollbar {
				width: 1px $i;

				&-button {
					display: none;
				}
				&-thumb {
					background-color: var(--fg) $i;
				}
			}
			&:not(:hover)::-webkit-scrollbar {
				display: none $i;
			}
		}

		.listItem {
			width: 100% $i;
			mar(bottom);
		}
		[style*="height: 56px"] { // DMs
			mar(top);
			height: unset $i;
		}
		.pill {
			display: none;
		}
		.wrapper-2PSQCG {
			&, & > svg {
				box(var(--guilds-size));
			}
			& > svg {
				z-index: 3;
			}
		}
		{$guilds[guild]} {
			transform: none $i;

			&::before {
				content: '';
				position: absolute;
				left: 0;
				box(1px, var(--guilds-size));
				background-color: var(--fg);
			}
		}
		{$guilds[guild-selected]}::before {
			--fg: var(--hl);
		}

		// Server folders
		/[aria-label="Servers"] > .wrapper {
			width: unset;

			& > span {
				display: none;
			}
		}
		[id^="folder-items"] {
			mar(bottom);
			brd(bottom);
			height: unset $i;
		}

		// Current server & mentions
		[href$="-lower_badge_masks"] { // lower badge mask
			display: none;
		}
		.lowerBadge {
			&::before {
				content: '';
				position: absolute;
				background-color: var(--color1);
			}

			~/ {$guilds[guild]}, & {
				position: relative;

				&::before {
					$w = calc(var(--guilds-size) + var(--pad));
					$h = calc(100% + var(--pad) * 2 + 4px);
					$left-pad-mult = guilds-horizontal ? -0.5 : -1;
					$top-pixels = guilds-horizontal ? 2px : -4px;

					// God knows why it's less by 4 pixels
					left: s('calc(var(--pad) * %s)', $left-pad-mult);
					top: s('calc(var(--pad) * -1 - %s)', $top-pixels);
					box(
						guilds-horizontal ? $w : $h,
						guilds-horizontal ? $h : $w
					);
				}
			}
		}
	}
	.guildSeparator {
		background-color: var(--border);
		box(100%, var(--border-width));
	}
	.tutorialContainer {
		& > .listItem,
		& + .listItem,
		& + [style] + .listItem {
			margin-bottom: calc(var(--pad) * 0.5) $i;
		}
	}
	if (guilds-horizontal) {
		@media (min-width: $small-screen) {
			.guilds {
				--guilds-size: var(--font-size);
				position: absolute;
				top: var(--header-h);
				bottom: unset;
				z-index: 1;
				box(var(--header-h), var(--sidebar-width));
				transform-origin: top left;
				transform: rotate(-90deg);

				{$guilds[scroller]} {
					padding-top: calc(var(--pad) / 2) $i;
					brd(left);
					brd(right, 0);
					brd(bottom);
				}
				.listItem, .guildSeparator {
					transform: rotate(90deg);
				}
			}

			.sidebar {
				position: relative;
				top: var(--header-h);
				height: calc(100% - var(--header-h));
			}
		}
	}

	// Header
	{$chat-title} {
		bg(2);
		header-focus(app-focused);
		lnh();
		pad();
		brd(bottom);
		height: var(--header-h);
		gap: var(--pad);

		.title:not(.cursorPointer),
		.children .iconWrapper,
		.iconContainer,
		.nicknames,
		.akaBadge,
		.avatar,
		.divider,
		.caret {
			display: none;
		}
		main > & > .children { // tabs
			margin-left: calc(var(--pad) * -1);
		}
		.title {
			lnh();

			&.defaultColor:not(:hover)::after {
				fg(2);
			}
			&.cursorPointer {
				replace-text('Direct Messages');
			}
			&.parentChannelName {
				replace-text('Thread');
			}

			&Wrapper {
				mar(0);
			}
		}
		.topic {
			lnh();
			mar(0);

			&:hover {
				fg();
			}
		}
		.icon {
			--interactive-hover: var(--fg);
		}
	}

	// Search
	.toolbar > .search {
		mar(0);
		order: -1;

		& > :not(.open) > div {
			pad(0);
			width: 240px $i;
			anim();

			&:not(:hover) {
				background-color: transparent $i;
				width: 20px $i;
			}
		}

		if (!font-awesome) {
			.iconContainer {
				display: block $i;
				box(20px);
			}
		}
	}

	// Bar
	.bar {
		&Base {
			background-color: color-a(4);
			backdrop-filter: var(--popup-filter);
			opacity: 1;
			padding: var(--pad) 0 $i;
			brd(,color4);
			height: unset;
			min-height: unset;
			left: var(--body-pad) $i;
			right: var(--body-pad) $i;

			&:first-child {
				brd(top, 0);
				border-radius: 0 0 var(--border-radius) var(--border-radius) $i;
			}
			&:last-child {
				brd(bottom, 0);
				border-radius: var(--border-radius) var(--border-radius) 0 0 $i;
			}
		}
		&Button {
			&Base {
				fg();
				line-height: unset;
				padding: 0 var(--pad);
				height: unset;
			}
			&Icon {
				display: none;
			}
		}
	}
	.messagesErrorBar {
		background-color: color-a(1);
		brd(,color1);
	}

	/**
	 * Popup
	**/
	// Global
	.root.fullscreenOnMobile {
		brd();
		shd(big);

		.message {
			bg(2);
			brd();
			shd(big);
		}
	}
	.footerSeparator {
		brd(top);
		shd(0);
	}
	.menu, .userPopoutOuter {
		brd();
	}
	.userPopoutInner,
	.userPopoutInner::before,
	.roundedBanner,
	.profileBadges,
	.overlayBackground {
		brd(0);
	}

	// Role background (stolen from gk)
	.role {
		overflow: hidden;
		background-color: transparent;

		&RemoveIcon {
			position: absolute;
		}
		&Circle::after {
			content: '';
			position: relative;
			display: block;
			right: -100px;
			min-width: 230px;
			height: 69px;
			background-color: inherit;
			opacity: var(--bg-opacity);
			pointer-events: none;
		}
	}

	// Recent mentions
	[aria-label="Recent Mentions"] {
		.tab:last-child,
		.scrollingFooterWrap {
			display: none;
		}
		.channelHeader {
			position: unset;
		}
		& > .header {
			z-index: 1;
		}
		.tab.active {
			background-color: transparent $i;
			pad(0);
			mar(0);
			height: unset;
			replace-text('Recent Mentions', header-primary);
		}
	}

	// Modals
	$qs-scroller = '[aria-label="Results"]'

	#app-mount > .popouts > div,
	[id^="popout"], // recent mentions, etc.
	.menu {
		dropfade();
	}
	.backdrop {
		opacity: 0 $i;
	}

	.quickswitcher {
		pad(0);
		brd();
		shd(big);
		dropfade();

		.input {
			lnh();
			text-overflow: ellipsis;
			pad();
			border-radius: var(--border-radius);
			shd(0);
			height: unset;

			& + {$qs-scroller} {
				bg();
				brd(top);
				z-index: 1;
			}
	
			&:focus + {$qs-scroller} {
				border-top-color: var(--hl) $i;
				box-shadow: 0 calc(var(--border-width) * -1) var(--hl);
			}
		}

		{$qs-scroller} {
			border-radius: 0 0 var(--border-radius) var(--border-radius);
			mar(0);
		}
		.content {
			height: auto $i;

			&Default {
				pad(0);

				&, .header {
					line-height: unset;
					flex();
				}
			}

			{$qs-scroller} > ^[1..-1] > :first-child {
				margin-top: calc(var(--pad) * -1);
			}
		}
		.header {
			normalise-header(false);
			mar(left);
			mar(right);
			width: 100%;
		}

		.result {
			border-radius: 0;
			height: unset;

			& > .contentDefault {
				lnh();
				pad();
				height: unset;
			}

			.note {
				text-transform: unset;
				mar(top, 0);
			}
			.miscContainer {
				opacity: 1;
			}

			&[aria-selected="true"] {
				background-color: var(--hl);

				* {
					color: var(--hl-fg);
				}
			}

			&[aria-selected="false"] .contentUnread svg {
				color: var(--header-primary);
			}
		}

		[style="height: 15px;"] {
			display: none;
		}
	}

	.downloadLink { // fix for "open original"
		color: var(--text-link) $i;
		opacity: 1;

		&:not(:hover) {
			text-decoration: none;
		}
	}

	/**
	 * Settings
	**/
	.contentColumn {
		width: 0;
	}

	/**
	 * Chat
	**/
	.scroller {
		&Inner {
			--alt-bg: messages-alt ? var(--bg2) : var(--bg);
			--compact-timestamp-width: 10ch;
			--compact-username-width: 12ch;
			padding-left: var(--body-pad);
			padding-right: var(--body-pad);

			@supports not (-moz-appearance: none) {
				padding-right: calc(var(--body-pad) - var(--scrollbar-width));
			}
		}
		&Spacer {
			height: var(--pad);
		}
	}

	// Messages
	[class*="message-"] {
		pad(0);
		mar(0);
		min-height: unset $i;

		&::before, &::after {
			display: none;
		}

		&[class*="compact-"] {
			--font-normal: var(--font-code); // for proper aligning
			--alt-bg: var(--bg2);
			--message-actions-pos-top: calc(var(--line-height) * 1px);

			& > .contents {
				text-indent: calc((var(--compact-timestamp-width) + var(--compact-username-width)) * -1 - 3ch);
				pad(0);
				mar(0);
			}
			& > .container {
				padding-left: calc(var(--compact-timestamp-width) + var(--compact-username-width) + 4ch) $i;
			}

			.timestamp .separator {
				fg(2);
				opacity: 1;
				position: unset;
				display: unset;
			}
			&:not([class*="groupStart-"]) .username {
				display: none;
			}

			// Align usernames IRC-style
			& > .contents {
				display: flex;
				gap: 1ch;
			}
			.header {
				text-indent: 0;
				width: calc(var(--compact-timestamp-width) + var(--compact-username-width) + 3ch);
				display: inline-flex;
				flex-shrink: 0;

				&Text {
					white-space: nowrap;
					text-align: right;
					display: flex;
					flex-grow: 1;
				}

				.username {
					text-overflow: ellipsis;
					width: 0;
					flex-grow: 1;
				}
			}
			.repliedMessage {
				padding-left: 1ch;
				margin-left: var(--compact-timestamp-width);
			}
		}

		&[class*="cozy-"] {
			mar(top);

			.header {
				pad();
				padding-left: calc(var(--pad) + var(--avatar-spacing) + var(--avatar-size) * var(--line-height)) $i;
				min-height: unset;

				& > span {
					margin-right: 1ch $i;
				}
			}
			.avatar {
				mar(0);
				box(calc(var(--avatar-size) * var(--line-height)));
				left: var(--pad);
				top: var(--pad);
			}
			.repliedMessage {
				margin-left: calc(var(--pad) + var(--avatar-spacing));
				mar(bottom, 0);
				height: unset;

				&::before {
					brd(left);
					brd(top);
					mar(0);
					margin-bottom: calc(var(--pad) / -0.5) $i;
					position: unset;
					box(40px, var(--font-size));
					z-index: 1;
				}
			}
			& > .contents > .messageContent,
			& > .container {
				mar(0);
			}

			if (messages-alt) {
				--message-actions-pos-top: 0;
				background-color: transparent $i;
				pad(top);
				brd(top);

				[role="separator"] + li > & {
					pad(top, 0);
					brd(top, 0);
				}
				.header {
					padding-top: calc(var(--pad) / var(--line-height)) $i;
				}
				.avatar {
					top: calc(var(--pad) / var(--line-height));
				}
				.repliedMessage {
					margin-left: calc(var(--avatar-spacing) - var(--border-width));
				}
				& > .contents,
				& > .container {
					margin-left: calc(var(--pad) * -1) $i;
				}
				& > .contents > .messageContent,
				& > .container {
					pad(0);
					pad(left);
					pad(right);
				}
			} else {
				--cozy-top-border-width: calc(var(--border-width) * -1);
				--message-actions-pos-top: var(--pad);
				bg(2);
				brd();

				.header {
					bg(2);
					brd(bottom);
				}
				& > .contents > .messageContent,
				& > .container {
					bg(3);
					pad();
				}
			}
		}

		&:not([class*="groupStart-"]) {
			pad(top, 0);
			brd(top, 0);
			margin-top: var(--cozy-top-border-width) $i;

			.messageContent {
				pad(top, 0);
			}
		}
		&[class*="mentioned-"] {
			brd(left, color3);
		}
		&[class*="automodMessage-"],
		&[class*="ephemeral-"],
		&[class*="highlighted-"],
		&[class*="replying-"] {
			brd(left, color4);
		}

		& > .contents {
			position: relative;
		}
		& > .container {
			padding: 0.25rem 0;
			gap: var(--pad);

			// Embed buttons
			.children {
				mar(top);
				height: unset;
			}
		}

		// Username
		.header {
			lnh();

			&Text {
				mar(0);
			}
		}
		.username {
			lnh();

			&:not(:hover) {
				fg(2);
				filter: none;
			}
		}
	}
	.message > .wrapper {
		@extend [class*="message-"];
		pad();
	}
	[data-list-id="chat-messages"] > [role="separator"] {
		brd(0);
		mar(0);
		mar(top);
		mar(bottom);
		height: calc(var(--font-size) * var(--line-height));
		top: 0 $i;

		& > span {
			lnh();
			pad();

			&::before {
				content: '';
				position: absolute;
				inset: 0;
				top: calc(50% - var(--border-width));
				brd(top);
				z-index: -1;
			}
		}

		& > .content {
			text-transform: uppercase;
			mar(0);
		}
		& > .unreadPill {
			bg();
			clr(9);
			white-space: pre;
			position: unset;
			height: unset;

			&::before {
				border-top-color: var(--color1) $i;
			}
			&::after {
				content: ' messages';
			}
		}

		svg {
			display: none;
		}
	}
	.botTag {
		background-color: unset;
		clr(5);
		pad(0);
		mar(0);
		top: 0;
		height: unset $i;
		vertical-align: unset;

		[class*="cozy-"] & {
			margin-left: 1ch $i;
		}

		&Verified {
			display: none;
		}
	}
	.timestamp {
		lnh();
		mar(0);
		height: unset;

		[class*="message"][class*="cozy-"] > .contents > &,
		[class*="message"][class*="cozy-"][class*="groupStart-"]:not(:hover) .header & {
			display: none;
		}
		[class*="message"][class*="compact-"] .header & {
			margin-right: 1ch $i;
			width: var(--compact-timestamp-width) $i;
		}
	}
	.repliedMessage {
		lnh();
		mar(right);

		& ~ .buttonContainer {
			top: calc(var(--font-size) * var(--line-height));
		}

		&::before {
			border-top-left-radius: var(--border-radius);
		}

		& > img {
			margin-right: 1ch;
		}
		.username {
			opacity: 1;
		}
	}
	.replyBadge {
		margin-right: 1ch;
		box(var(--font-size));
	}
	.mention {
		border-radius: var(--border-radius);
		padding: 0 calc(var(--pad) / 2);
	}
	[aria-label="Message Actions"] {
		pad(0);
		top: var(--message-actions-pos-top);
		right: var(--pad);

		if (!messages-alt) {
			[class*="cozy-"] & {
				--bg: var(--bg3);
			}
		}

		&.isHeader {
			top: calc(var(--header-h) + var(--pad));
		}

		& > .wrapper {
			bg();
			brd(0);
			shd(0);
			height: unset;
			gap: 1ch;
			overflow: unset;

			&::before {
				content: '';
				position: absolute;
				left: -2ch;
				box(2ch, 100%);
				background-image: linear-gradient(90deg, transparent, var(--bg));
			}

			& > div {
				background-color: transparent;
				pad(0);
				min-width: unset;
				height: unset;
			}
		}
	}

	/**
	 * Everything else in chat
	**/
	// Attachments
	.hoverButton {
		pad(0);

		&Group {
			opacity: 1;
			brd(0);
			outline: none;
			mar(left);
			position: unset;
			gap: 1ch;
		}
	}
	.newMosaicStyle {
		brd();

		& > :first-child {
			brd(0);

			code {
				bg();
			}
		}

		.footer {
			lnh();
			brd(0);
			pad();
			height: unset;
			gap: 1ch;

			& > * {
				pad(0);
			}
		}
	}
	.nonMediaAttachmentsContainer {
		mar(top);
		mar(bottom);
	}

	// Normal file
	.attachment {
		pad();
		brd();

		.icon {
			mar(right);
		}
		.downloadWrapper {
			mar(right, 0);
		}
	}

	// Voice messages
	.messageAttachment > .container {
		background-color: var(--alt-bg);
		pad();
		brd();
	}

	// Images
	.mediaAttachmentsContainer {
		&,
		& > div,
		/.messageAttachment,
		/[class*="imageWrapper-"] {
			border-radius: var(--border-radius);
		}
	}

	// Audio
	.wrapperAudio {
		fg();
		pad(0);
	}
	.audio {
		&Metadata {
			background-color: var(--alt-bg);

			&::before {
				mar();
				height: unset;
			}

			.metadata {
				&Content {
					pad();
					brd(left);
				}
				&Download {
					height: unset;
				}
				&Size {
					opacity: 1;
					fg(2);
					lnh();
				}
			}
		}
		&Controls {
			background-color: var(--alt-bg);
			brd(0);
			brd(top);
			mar(0);
		}
	}
	.fakeEdges {
		&::before {
			border-radius: 50% 0 0 50%;
		}
		&::after {
			border-radius: 0 50% 50% 0;
		}
	}

	// Code view
	.formattedSize {
		padding-left: 1ch;

		&::before {
			content: '(';
		}
		&::after {
			content: ')';
		}
	}

	// Threads
	[aria-roledescription="Open Thread Button"] {
		normalise-button();
		background-color: var(--alt-bg) $i;
	}
	.cta,
	.name {
		lnh();
	}
	.bottomLine {
		display: none;
	}

	// Embeds
	.embed {
		border-radius: var(--border-radius);

		&Full {
			background-color: var(--alt-bg);
			border-left-color: var(--hl);
		}
		&Link {
			color: inherit $i;
		}
		&Margin {
			mar(top);
		}
		&SuppressButton {
			opacity: 1;
			pad(0);
		}
		&Provider {
			normalise-header();
		}
		&Title {
			mar(0);
		}
		&Author {
			mar(0);
			mar(bottom);

			&Icon {
				margin-right: 1ch;
				box(var(--avatar-size));
			}
		}
		&Description {
			lnh();
		}
		&Footer {
			align-items: start;

			&Icon {
				mar(right);
			}
			&Text {
				lnh();
				fg(2);
			}
		}
		&Thumbnail {
			mar(0);
			mar(left);
		}
		&Media {
			border-radius: var(--border-radius);

			~/Full & {
				mar(top);
			}
		}
		&Image,
		&Thumbnail,
		&Video {
			img, video {
				border-radius: var(--border-radius);
			}
		}
	}
	.grid {
		pad();
	}

	// Reactions
	$reaction = {
		normal: '[class*="reaction-"]',
		own:    '[class*="reactionMe-"]'
	}
	.reaction {
		&s {
			pad(0);
			mar(0);
		}
		&Inner {
			pad(0);
		}
		&Count {
			fg();
			pad();
			brd(left);
			mar(0);
		}
	}
	{$reaction[normal]} {
		background-color: var(--alt-bg) $i;
		brd();
		mar(right);
		focus(focus-within);

		img {
			pad();
			mar(0);
		}
	}
	{$reaction[own]} {
		--alt-bg: color-a(3) $i;
		--border: var(--color11) $i;
	}

	// Syntax highlighting
	.hljs {
		background-color: var(--alt-bg) $i;
		lnh();
		pad();
		brd();

		&-comment,
		&-quote {
			fg(2);
		}
		&-addition,
		&-built_in,
		&-deletion,
		&-meta,
		&-meta &-keyword,
		&-name,
		&-section,
		&-selector-class,
		&-selector-id,
		&-selector-tag,
		&-title,
		&-keyword {
			clr(9);
		}
		&-bullet,
		&-doctag,
		&-literal,
		&-link,
		&-meta &-meta-string,
		&-number,
		&-regexp,
		&-string,
		&-subst,
		&-symbol {
			clr(10);
		}
		&-selector-pseudo {
			clr(12);
		}
		&-variable {
			clr(13);
		}
		&-attr,
		&-attribute,
		&-selector-attr,
		&-class &-title,
		&-template-variable,
		&-type {
			clr(14);
		}
	}

	// Message textbox
	.channelTextArea {
		div > & {
			--channeltextarea-background: var(--bg);
		}

		& > div {
			pad(right);
			brd();
			focus(focus-within);

			&::-webkit-scrollbar {
				display: none;
			}
		}

		button {
			pad(0);
			mar(0);

			& > .contents {
				pad(0);
				mar(0);

				if (font-awesome) {
					display: none;
				}
			}
		}
		.buttons {
			pad(left);
			brd(left);
			mar(0);
			height: unset;
			align-items: center;
		}
	}
	.form {
		padding-left: var(--body-pad) $i;
		padding-right: var(--body-pad) $i;
		mar(top, 0);

		& > :first-child {
			/*
			 * The userscript doesn't work on
			 * elements that change their attributes
			 */
			@extend .channelTextArea;
			margin-bottom: calc(var(--font-size) * var(--line-height) + var(--pad) * 2);

			& > div > div {
				pad(0);
			}
			& > .attachedBars {
				border-radius: var(--border-radius) var(--border-radius) 0 0 $i;
				brd(bottom, 0);

				& + div {
					border-radius: 0 0 var(--border-radius) var(--border-radius) $i;
				}
			}
		}
		textarea,
		.button {
			--bg2: var(--bg);
			lnh();
		}

		.attachWrapper > button {
			fg(2);
			pad();
			brd(right);
			border-radius: 0;

			&:hover {
				fg();
			}
		}
		.buttons [aria-label="Open GIF picker"] {
			--bg2: var(--bg);
			--pad: calc(var(--reserve-pad) / 2);
			normalise-button();

			&::before {
				content: 'GIF';
			}
		}
		.separator {
			mar(0);

			&::before {
				display: none;
			}
		}

		// Typing
		& > :last-child:not(:only-child) {
			inset: 0;
			left: var(--body-pad);
			top: unset;
			lnh();
			pad(bottom);
			height: unset;
		}
	}
	.textArea {
		lnh();

		&[style^="height"]:not(textarea) {
			height: unset $i;
		}

		&,
		/.attachButton {
			height: 100%;
			min-height: unset;
		}
	}
	// <textarea>
	.fontSize16Padding {
		pad();
		max-height: 200px;
		right: 0;
	}

	.autocompleteAttached {
		bottom: calc(100% - var(--border-width));
		shd(0);
	}
	#channel-attach {
		margin-left: -1px;
		margin-bottom: -8px;
		shd(0);
	}

	// Search results
	.search {
		&Header {
			bg(3);
			pad(0);
			pad(left);
			brd(bottom);
			height: var(--header-h);

			&TabList {
				gap: 0;
			}

			[role="tab"] {
				lnh();
				pad();
				brd(0);
				mar(0);

				&:hover {
					bgc();
				}
			}
		}
		&Result {
			brd();
			mar(bottom);

			&Group {
				margin-bottom: calc(var(--pad) * 2);
			}
			&sWrap {
				brd(left);
				width: var(--search-results-width) $i;

				.scroller {
					pad(0);
					overflow: hidden $i;

					[role="list"] {
						/*
						 * Move scrollbar away from the pages list,
						 * as it is sticky now.
						 */
						overflow: hidden scroll;
						height: calc(100% - var(--header-h) - var(--pad) * 2);

						&::-webkit-scrollbar {
							&-button, &-track {
								--bg2: var(--bg);
							}
						}
					}
					& > .container { // pages
						position: sticky;
						bottom: 0;
						z-index: 1;
					}
				}
			}
		}
	}
	.page {
		&Control {
			pad(0);

			&Container {
				bg(3);
				brd(top);
				mar(0);
			}

			button {
				--bg2: var(--bg);
				--pad: calc(var(--reserve-pad) / 2);
				normalise-button();
			}
			.roundButton {
				background-color: transparent;
				fg(2);
				pad();
				brd(0);

				&:hover {
					fg();
				}
			}
			.activeButton {
				hl();
			}
		}
		&Button {
			lnh();
			mar(0);
			box(unset);
			min-width: unset;
			min-height: unset;

			.iconCaret {
				display: none;
			}
		}
	}
	#search-results {
		pad();

		.channelName {
			&Container {
				normalise-header();
			}
			&Text {
				lnh();
			}
			&Icon {
				display: none;
			}
		}
	}
	.highlight {
		hl();
	}
}
