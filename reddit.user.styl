/* ==UserStyle==
@name           Reddit
@namespace      github.com/openstyles/stylus
@version        2.0.0
@description    A new userstyle
@author         Me

@preprocessor stylus

@var checkbox sticky         "Sticky header & sidebar" 1
@var text     content-margin "Content margin"          0

@var checkbox sidebar-show   "Show the sidebar"        0
@var text     sidebar-width  "Sidebar width"           228px
@var select   sidebar-pos    "Sidebar position" {
	'Left':  'left',
	'Right': 'right'
}
==/UserStyle== */

// Variables
vendors = official;
$small-screen = 768px;
$select-shadow = inset 0 1px 2px rgba(0, 0, 0, 0.1);
$select-size = 16px;
$i = !important;

// Stylus
svar(var) {
	s('var(--%s)', var);
}

cond(n, yes, no) {
	(n == 0 ? no : yes) $i;
}

sel-cond(sel, pos) {
	pos ? s('%s-%s', sel, pos) : sel;
}

color-a(n, bright = true) {
	s = bright ? -2 : null;
	n = n > 6 ? n - 8 : n;

	s('hsla(var(--color%s-h),	var(--colorscheme-s%s),	var(--colorscheme-l%s), var(--bg-opacity))', n, s, s);
}

// Appearance
bg(n =) {
	background-color: s('var(--bg%s)', n) $i;

	if (n == -tr || n == -tr2 || n == -tr3) {
		backdrop-filter: var(--popup-filter) $i;
	}
}

fg(n =) {
	color: s('var(--fg%s)', n) $i;
}

bgc(n1 =, n2 =) {
	bg(n1);
	fg(n2);
}

hl() {
	background-color: var(--hl) $i;
	color: var(--hl-fg) $i;
}

accent() {
	background-color: var(--accent) $i;
	color: var(--accent-fg) $i;
}

clr(n) {
	color: s('var(--color%s)', n) $i;
}

lnh() {
	line-height: var(--line-height) $i;
}

pad(pos =, n = 1) {
	{sel-cond(padding, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

mar(pos =, n = 1) {
	{sel-cond(margin, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

shd(n) {
	box-shadow: cond(n, s('var(--shadow-%s)', n), none);
}

rad(n = 1) {
	border-radius: cond(n, var(--border-radius), 0);
}

brd(pos =, color = border) {
	if (color) {
		color = svar(color);
	}

	{sel-cond(border, pos)}: \
		(color == 0 ? none : pos == 0 ? none : var(--border-width) solid color) $i;
	if (!pos) {
		rad(pos);
	}
}

// Position
box(w, h = w) {
	width: w $i;
	height: h $i;
}

flex(display = flex, alignment = center, justification =) {
	display: display $i;
	align-items: alignment $i;
	justify-content: justification $i;
}

// Animation
anim(name =, func = ) {
	@media (prefers-reduced-motion: no-preference) {
		{name ? animation : transition}: name var(--trans-dur) func $i;
	}
}

dropfade() {
	anim(dropfade, cubic-bezier(0.2, 0.9, 0.6, 1));
}

// Focus
focus(p = focus) {
	anim();

	&:{p} {
		border-color: var(--hl) $i;
		box-shadow: var(--shadow-ins) var(--hl) $i;
		outline: none $i;
	}
}

header-focus(class = page-focus) {
	.{class} & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}

	// Stylus is unable to recognise :where()
	:root:not(:-moz-window-inactive) & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}
}

// Text
replace-text(content =, text-color = fg, pos = after) {
	color: transparent $i;
	letter-spacing: -9999px $i;

	if (content) { // Replace
		&::{pos} {
			content: content $i;
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	} else { // Hide
		* {
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	}
}

hide-chars(amount, pos, bg =) {
	margin-{pos}: s('-%sch', amount) $i;
	position: relative $i;

	element = pos == left ? before : after;
	&::{element} {
		content: '' $i;
		position: absolute $i;
		inset: 0;
		box(s('%sch', amount), calc(1em * var(--line-height)));
		bg(bg);
	}
}

// Normalisation
disabled() {
	&:disabled {
		opacity: 0.5 $i;
		cursor: not-allowed $i;
	}
}

normalise-select() {
	appearance: none $i;
	bgc(2);
	lnh();
	background-image:
		linear-gradient(55deg, var(--bg2) 43%, transparent 45%),
		linear-gradient(125deg, transparent 53%, var(--bg2) 55%),
		linear-gradient(180deg, var(--bg2) 30%, var(--fg) 30%) $i;
	background-size: 20px 20px $i;
	background-repeat: no-repeat $i;
	background-position: right 50% $i;
	pad();
	padding-right: calc(var(--pad) + 20px) $i;
	brd();
	focus();
	disabled();
}

normalise-input() {
	bgc(2);
	lnh();
	pad();
	brd();
	focus();
	disabled();

	&::placeholder {
		fg(2);
	}
}

normalise-button() {
	bgc(2);
	lnh();
	background-image: none $i;
	padding: var(--pad) calc(var(--pad) * 2) $i;
	brd();
	cursor: pointer $i;
	focus();
	disabled();
}

normalise-color() {
	bg(2);
	pad(0);
	brd();
	box($select-size);
	focus();
	disabled();

	&::-webkit-color-swatch {
		brd(0);
		// Prevent from making it look like a radio input
		border-radius: calc(var(--border-radius) * 0.33) $i;

		&-wrapper {
			pad(0);
		}
	}
}

normalise-checkbox(label = true) {
	if (label) {
		/label {
			lnh();
			flex();
			gap: 1ch $i;
		}
	}

	appearance: none $i;
	bg(2);
	brd();
	// Prevent from making it look like a radio input
	border-radius: calc(var(--border-radius) * 0.33) $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	min-width: $select-size $i;
	focus();

	&::before,
	&::after {
		content: '';
		position: absolute $i;
		inset: 0;
		background-color: var(--hl) $i;
		transform-origin: 0 0 $i;
	}
	&:disabled {
		&::before,
		&::after {
			background-color: var(--fg2) $i;
		}
	}

	&::before {
		transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0) $i;
	}
	&:indeterminate::before {
		transform: rotate(0) translateY(37.5%) translateX(10%) scaleX(0.8) scaleY(0.25) $i;
		transition-duration: 33.3ms $i;
	}
	&::after {
		transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(0) $i;
	}

	&:checked {
		&::before {
			transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0.4) $i;
			transition-duration: 33.3ms $i;
		}
		&::after {
			transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(1.2) $i;
			transition-delay: 33.3ms $i;
			anim();
		}
	}
}

normalise-radio() {
	appearance: none $i;
	bg(2);
	brd();
	border-radius: 50% $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	focus();

	&::before {
		content: '';
		position: absolute $i;
		inset: $select-size / 5;
		background-color: var(--hl) $i;
		border-radius: 50% $i;
		transition: transform var(--trans-dur) linear $i;
		transform: scale(0) $i;
	}
	&:disabled::before {
		background-color: var(--fg2) $i;
	}
	&:checked::before {
		transition-timing-function: cubic-bezier(0, 0, 0.3, 1.5) $i;
		transform: scale(1) $i;
		anim();
	}
}

normalise-header(first = true) {
	fg();
	lnh();
	text-transform: uppercase $i;
	letter-spacing: 1px $i;
	pad(0);
	pad(bottom);
	brd(bottom);
	mar(0);
	mar(bottom);
	if (!first) {
		margin-top: calc(var(--pad) * 2) $i;
	}
}

// Website-specific functions
fa(char) {
	font-size: 0 $i;

	&::before {
		content: s('"\f%s"', char) $i;
		font: var(--font-size) 'Font Awesome 6 Free' $i;
	}
}

capitalise() {
	&::first-letter {
		text-transform: capitalize;
	}
}

@-moz-document domain("old.reddit.com") {
	/**
	 * Variables
	**/
	body {
		--content-margin: match('^^\d+$', s('%s', content-margin)) \
			? s('%spx', content-margin) \
			: content-margin;
		--sidebar-width: sidebar-width;

		@media (max-width: $small-screen) {
			--sidebar-width: 0px;
		}
	}

	/**
	 * Global
	**/
	body {
		bgc();
		lnh();
	}
	.content {
		--margin: calc(var(--body-pad) + var(--content-margin));
		margin: var(--margin);
		margin-{sidebar-pos}: calc(var(--margin) + var(--sidebar-width));
		margin-top: var(--body-pad);
		position: relative;
		display: flex;
		flex-direction: column;

		&::before {
			normalise-header();

			.listing-page & {
				content: 'Posts';
			}
			.comments-page & {
				content: 'Post';
			}
		}

		& > .commentarea > .sitetable {
			margin-bottom: var(--body-pad);
		}
	}
	a {
		color: var(--fg-link);

		&:hover {
			text-decoration: underline;
		}
	}
	.gray {
		fg(2);
	}
	input[type="checkbox"] {
		normalise-checkbox();
	}

	/**
	 * Hide elements
	**/
	// I. Unsorted
	.crosspost-preview-tagline > :first-child, .crosspost-preview-tagline > :nth-child(2), // Upvotes
	.score, .tagline > .score-hidden, .search-result-icon-score, .search-score, // ^
	.comment.collapsed:not(.collapsed-for-reason):not(.deleted),
	#search_hidemore, #search_showmore,
	[data-event-action="permalink"],
	.comments-page .expando-button,
	.buttons > :nth-last-child(2), // Hide post
	.search-result-group .info,
	.footer-parent, .debuginfo, // Footer
	.linkflairlabel, .flair, // Flairs
	.comments-page .buttons,
	.cakeday + .userattrs, // Cake day
	.profile-page .author,
	.profile-page .expand,
	.read-next-container,
	.crosspost-badge,
	#sr-header-area, // Header top
	.awardings-bar,
	.report-button,
	#header-img,
	.linkinfo, // Sidebar post info

	// II. Not logged in
	.midcol,
	.login-required,
	.give-gold-button, .share,
	.subscribe-button, .submit,
	#header-bottom-right, #login_login-main, .commentsignupbar
	{
		display: none $i;
	}

	/**
	 * Header
	**/
	#header {
		bg(2);
		header-focus();
		padding-{sidebar-pos}: var(--sidebar-width);
		brd(bottom);
		min-height: var(--header-h);
		box-sizing: border-box;

		if (sticky) {
			position: s('sticky');
			top: 0;
			z-index: 2;
			//width: 100%;
		}

		&,
		&-bottom-left {
			flex();
		}
	}
	.pagename {
		font-variant: unset;
		margin-right: 1ch;

		&::before {
			content: '/r/';

			.profile-page & {
				content: '/u/';
			}
		}

		&,
		a {
			fg();
		}
	}
	.tabmenu {
		mar(top, 0);

		li {
			mar(0);
			display: inline-flex;
			position: relative;

			&.selected a {
				hl();
				brd(0);
			}

			a {
				background-color: transparent;
				fg(2);
				capitalise();
				pad();

				&:hover {
					fg();
					text-decoration: none;
				}
			}
		}
	}

	/**
	 * Sidebar
	**/
	.side {
		bg(2);
		pad();
		mar(0);
		brd(sidebar-pos == left ? right : left);
		width: var(--sidebar-width);
		box-sizing: border-box;
		float: sidebar-pos;
		position: sidebar-show ? absolute : fixed;
		{sidebar-pos}: 0;
		top: var(--header-h);
		bottom: 0;
		z-index: 100;

		if (sticky) {
			// This has to be like that in order to be able to scroll it
			position: fixed;
			overflow: auto;
		}

		if (sidebar-show) {
			@media (max-width: $small-screen) {
				display: none;
			}
		}

		&::-webkit-scrollbar {
			display: none;
		}

		.spacer {
			mar(0);
		}
	}

	#search {
		pad(0);
		mar(bottom);

		&expando {
			bg();
			pad();
			brd();
			mar(top);
			height: unset $i;

			& > label {
				margin-bottom: calc(var(--pad) / 2);
			}
			input,
			p {
				mar(bottom, 0);
			}
		}

		& > label {
			flex();
		}
		input[type="text"] {
			normalise-input();
			min-width: unset $i;
			max-width: unset $i;
			width: 100%;

			.side & {
				--bg2: var(--bg);
			}

			&::placeholder {
				text-transform: capitalize;
			}
		}
	}
	.titlebox {
		:not(a),
		h1 a {
			fg();
		}
		a {
			color: var(--fg-link);
		}
		.bottom {
			pad(top, 0);
			brd(top);
		}
	}

	if (!sidebar-show) {
		body {
			--sidebar-width: 0px;
		}
		.side {
			pad(0);
			brd(0);

			& > :not(:first-child) {
				display: none;
			}
		}
		body:not(.search-page) #search {
			--pad-05: calc(var(--pad) / 2);
			position: sticky ? fixed : absolute;
			top: calc(var(--pad-05) - var(--border-width));
			right: var(--pad-05);
			width: 25%;

			&::before {
				content: '';
				position: absolute;
				left: -2ch;
				box(
					2ch,
					calc(
						var(--font-size) * var(--line-height) \
						+ var(--pad) + var(--border-width) * 2
					)
				);
				background-image: linear-gradient(90deg, transparent, var(--bg2));
			}

			&expando {
				shd(big);
				fade();
			}

			& > input {
				position: s('sticky'); // for focus box-shadow's z-index (maybe)

				&[type="text"] {
					padding: var(--pad-05) $i;
				}
			}
		}
		.page-focus #search::before {
			--bg2: var(--accent);
		}
	}

	// Subreddit name, readers and online users in the same line
	.redditname,
	.users-online {
		display: initial;
	}
	.subscribers,
	.users-online .number {
		&::before {
			content: var(--delim);
		}
	}
	.subscribers .word,
	.users-online .word,
	.users-online::before {
		display: none;
	}

	/**
	 * Content
	**/
	.reddit-infobar,
	.infobar {
		background-color: color-a(3);
		pad();
		brd(,color11);
		mar(0);
		mar(bottom);

		&.with-icon {
			min-height: unset;

			&::before {
				display: none;
			}
		}

		p {
			mar(0);
		}
	}
	.md {
		max-width: unset;

		.link .usertext-body & {
			background-color: unset;
			pad(0);
			brd(0);
			mar(0);

			.listing-page & {
				margin-right: 4ch $i;
			}
		}
		.crosspost-preview-content .usertext-body & {
			pad();
		}
		.linklisting &,
		.commentarea & {
			mar(top);
			mar(bottom, 0);
		}

		&-spoiler-text {
			background-color: unset $i;
			pointer-events: none;
		}

		&,
		* {
			fg();
			lnh();
		}
		blockquote {
			border-left: 2px solid var(--fg2);
			mar(left, 0);

			&:not(:last-of-type) {
				mar(bottom);
			}
		}
		hr {
			background-color: var(--border);
			height: var(--border-width);
			margin: var(--pad) 0;

			.side &:first-child {
				mar(top);
			}
		}
		table {
			mar(top);
		}
		th,
		td {
			brd();
			padding: calc(var(--pad) / 2) var(--pad);
		}
		.-lists,
		ul,
		ol {
			padding-left: 3ch;
		}
		p,
		h3,
		h4,
		ul,
		ol {
			mar(0);
		}
		a {
			fg(-link);
		}
	}
	code,
	pre {
		bg();
		pad(0);
		brd();
		mar(0);

		.expando & {
			bg(2);
			brd(0);
		}
	}
	pre {
		pad();

		p + & {
			mar(top);

			&:not(:last-child) {
				mar(bottom);
			}
		}

		& > code {
			brd(0);
		}
	}
	.title {
		fg();
		lnh();
		mar(0);
		flex-grow: 1;

		.top-matter > &,
		.text-content > & {
			normalise-header();
			flex(,end, space-between);
		}
		.profile-page & {
			pad(0);
			brd(0);
		}

		&-button {
			normalise-button();
			text-transform: capitalize $i;
			text-decoration: none $i;
			letter-spacing: 0 $i;
			mar(left);
			flex();
			position: absolute;
			top: 0;
			left: calc(17ch + 16px);
		}
	}
	.crosspost-preview {
		brd();
		mar(top);

		&,
		&-content {
			bg();
		}
		&-header {
			pad();
			brd(bottom);
		}
		&-tagline {
			mar(0);

			& > .dot {
				display: none;
			}
			& > .comments {
				fg(2);
			}
		}
		.link &-content .self-divider {
			brd(top);
			mar(0);
			display: none;
			// TODO
		}
	}
	.admin_takedown {
		background-color: transparent;
		pad(0);
	}
	.morecomments a {
		color: var(--fg-link);
		mar(0);
	}
	.link .flat-list {
		pad(0);
		position: relative;
	}
	.nav-buttons {
		lnh();
		margin-bottom: var(--body-pad) $i;
		capitalise();
	}
	.nextprev,
	.nextsuggestions {
		fg();

		a {
			normalise-button();
			display: inline-block;

			&[rel$="prev"] {
				replace-text('Previous');
				mar(right);
			}
			&[rel$="next"] {
				replace-text('Next');
			}
		}
		.separator {
			display: none;
		}
	}

	// Comments
	.subreddit,
	.menuarea,
	.comment {
		mar(0);
		pad(0);
	}
	.panestack-title {
		normalise-header(false);
	}
	.comment {
		lnh();
		pad(0);

		body:not(.profile-page) &:not(.collapsed) > .entry > .tagline {
			pad(bottom);
			brd(bottom);
			position: relative;
		}
		&.collapsed {
			&.deleted .numchildren {
				margin-left: -1ch;
			}

			.tagline * {
				font-style: normal $i;
			}
			.expand {
				fa(0fe);
			}
		}

		&area {
			position: relative;
		}

		.expand {
			fa(146);
			fg(2);
			pad(0);
			margin-left: 1ch;
			mar(right, 0);
			float: right;

			&:hover {
				fg();
				text-decoration: none;
			}
		}
		.author {
			fg();
		}
		.child,
		.showreplies {
			brd(left, 0);
			mar(left, 0);
			mar(top);

			&:empty {
				display: none;
			}
		}
		&.deleted em {
			clr(9);
		}
	}
	.edited-timestamp {
		replace-text(' ('attr(title)')', fg2);
	}
	.usertext {
		&.grayed &-body,
		&.border &-body {
			background-color: transparent;
			fg();
			pad(0);
		}
	}
	.gallery {
		&-tiles {
			flex();
			gap: var(--pad);
		}
		&-navigation {
			pad(0);
		}
	}

	// Search
	.search {
		&pane {
			pad(0);
			mar(0);

			h4 {
				normalise-header();
			}
			p {
				mar(0);
			}
		}
		&-submit-button {
			display: none;
		}
		&-header {
			&-label {
				lnh();
			}
			&-menus {
				fg(2);
			}
		}
		&-title[href] {
			fg();
			width: 100%;

			& > mark {
				hl();
			}
		}
		&-result {
			mar(top, 0);

			&-group {
				pad(0);
				max-width: unset;
				min-width: unset;

				&-header {
					normalise-header(false);
					flex(,flex-end, space-between);
				}
			}
			&-header,
			&-meta,
			&-meta > *,
			&-footer,
			&-footer > * {
				lnh();
			}
			&-header {
				normalise-header();
			}
			&-meta {
				fg(2);
				margin-left: 3ch;
				position: relative;
			}
			&-icon-external {
				display: none;
			}
			&-footer > .search-link {
				mar(0);
			}

			& > div {
				width: calc(100% - 70px - var(--pad));
			}
			a {
				fg(-link);
			}
		}
		&-expando {
			&::before {
				height: calc(var(--font-size) * var(--line-height)) $i;
				background-image: linear-gradient(
					180deg,
					transparent,
					var(--bg2)
				) $i;
			}

			&.collapsed {
				max-height: 0;
			}

			&-button {
				text-decoration: none $i;

				&.expanded &-label-expanded,
				&.collapsed &-label-collapsed {
					display: block;
				}
				&.expanded &-label-expanded {
					mar(top);
				}

				& > span {
					normalise-button();
					capitalise();
					--bg2: var(--bg);
					width: max-content;
				}
			}
		}
		&-result-footer,
		&-result &-expando {
			pad(top);
			brd(top);
			mar(top);
		}
	}
	#moresearchinfo {
		background-color: color-a(11);
		pad();
		brd(,color11);
		mar(0);
		max-width: unset;
		height: unset $i;

		#previoussearch & {
			display: block $i;
		}

		& > p {
			display: none;
		}
	}
	dl,
	dt,
	dd {
		mar(0);
	}
	dl {
		display: grid;
		grid-template-columns: 1fr 1fr;
	}
	dd {
		capitalise();
	}

	// Posts
	.thing {
		& &,
		& & & &,
		& & & & & &,
		& & & & & & & &,
		& & & & & & & & & & {
			background-color: var(--bg);
		}
		& & & & & & & & & & &,
		& & & & & & & & &,
		& & & & & & &,
		& & & & &,
		& & & {
			background-color: var(--bg2);
		}

		colors = {
			stickied: 2,
			locked:   3
		}
		for k, v in colors {
			&.{k} {
				background-color: color-a(v) $i;
				brd(,s('color%s', v));
			}
			/.{k}-tagline {
				display: none $i;
			}
		}
		&[data-nsfw="true"] {
			background-color: color-a(1) $i;
			brd(,color1);
		}

		&.morerecursion {
			background-color: transparent $i;
			pad(0);
			pad(top);
			brd(0);
			brd(top);
		}
	}
	.thing,
	.search-result {
		background-color: var(--bg2);
		pad();
		brd();
		mar(bottom);
		position: relative;

		.child & + .clearleft:last-child {
			margin-top: calc(var(--pad) * -1);
		}

		&.last-clicked {
			brd(, hl, false);
			box-shadow: var(--shadow-ins) var(--hl);
		}
	}
	.deepthread {
		&::after {
			display: none;
		}

		a {
			fg(-link);
		}
	}
	.rank {
		fg(2);
		position: absolute;
		right: var(--pad);
		bottom: var(--pad);
		width: unset $i;

		.thing.stickied > &,
		.thing:not(:hover) > & {
			display: none;
		}

		&::before {
			content: '#';
		}
	}
	.thumbnail {
		mar(right);
		mar(bottom, 0);

		&.nsfw,
		&.spoiler,
		&.self,
		&.image,
		&.default,
		&.account {
			visibility: hidden; // preserve the left spacing

			.profile-page & {
				display: none;
			}
		}
	}
	.entry {
		mar(left, 0);

		.profile-page .comment > & {
			brd(top);
			mar(top);

			& > .buttons {
				margin-left: -1ch;
			}
		}

		.buttons {
			.profile-page & {
				pad(top);
				brd(top);
				mar(top);
			}
			.profile-page .thing:not(.comment) & {
				margin-top: calc(var(--font-size) * -1);
			}

			& > li {
				pad(0);
				padding-right: 1ch $i;
				lnh();

				&:first-child:not([class]) { // stamp
					display: none;
				}
			}
			a {
				fg(2);
				pad(0);
			}
		}
	}
	.tagline {
		position: static $i;

		.profile-page & {
			position: absolute $i;
			top: var(--pad);
			right: var(--pad);
			bg(2);

			&::before {
				content: '';
				position: absolute;
				left: -2ch;
				box(2ch, 100%);
				background-image: linear-gradient(
					90deg,
					transparent,
					var(--bg2)
				);
			}
		}
		.listing-page:not(.profile-page) & {
			margin-left: 7ch;
		}
		.comments-page .thing:not(.comment) &:not(.crosspost-preview-tagline) {
			replace-text();

			../,
			../ a,
			& > time {
				fg(2);
			}
			& > time::after {
				content: ' by ';
				fg(2);
				white-space: pre-wrap;
				display: inline-block;
			}
			/.userattrs:not(:empty),
			& > .stickied-tagline {
				margin-left: 1ch;
			}
		}

		.author,
		.subreddit {
			fg();
			mar(right, 0);
		}
	}
	.profile-page .parent {
		replace-text();

		& > .subreddit {
			fg(-link);

			&::before {
				content: ' in ';
				display: inline-block;
				fg();
				white-space: pre;
			}
		}
	}
	.oc-tag {
		bgc(2, 2);
		lnh();
		pad(0);
		mar(0);
	}
	.expando {
		pad(top);
		brd(top);
		mar(0);
		mar(top);

		&-button {
			background: none $i;
			fa(146);
			mar(0);
			margin-right: 1ch $i;
			box(unset);

			.profile-page & {
				position: absolute;
				left: var(--pad);
				bottom: var(--pad);
			}

			&:not(:hover) {
				fg(2);
			}

			&.collapsed {
				fa(0fe);
			}
		}
		&-gate__show-once {
			normalise-button();
			text-transform: unset $i;
		}
	}
	body:not(.profile-page) .first,
	body:not(.profile-page) .comments,
	.search-comments {
		position: absolute;
	}
	.comments,
	.search-comments,
	[data-event-action="context"],
	[data-event-action="full_comments"] {
		fa(unquote('086'));
		left: calc(var(--font-size) * 1.5);
		top: calc(var(--font-size) * -1 - 4px);

		&:hover {
			text-decoration: none $i;

			&::before {
				fg();
			}
		}

		&.empty {
			&::before {
				clr(1);
			}

			&:hover::before {
				clr(9);
			}
		}
	}
	.profile-page .thing.link .first {
		margin-left: 3ch;
	}
	[data-event-action="context"] {
		fa(unquote('075'));
	}
	.search {
		&-result-meta > &-comments {
			fg(2);
			left: calc(var(--font-size) * -1.5);
			top: 2px;
		}
	}

	// Domains
	domains = {
		"i.redd.it":   Image,
		"i.imgur.com": Image,
		"v.redd.it":   Video,
		"github.com":  GitHub
	}
	.domain {
		replace-text(,fg2);

		.thing[data-domain^="self"]:not([data-crosspost-root-subreddit]) & {
			display: none;
		}

		for k, v in domains {
			.thing[data-domain=\"{k}\"] & > a {
				replace-text(s('"%s"', v), fg2);
			}
		}

		.thing[data-domain="reddit.com"] & a,
		.thing[data-url^="https://www.reddit.com/gallery"] & > a {
			replace-text('Album', fg2);
		}
	}

	// Menu
	.search-menu,
	.menuarea > .spacer {
		.selected,
		& > .drop-choices {
			capitalise();
			text-transform: none;
			letter-spacing: 0;
		}
	}
	.search-menu {
		lnh();
		margin-left: 1ch;

		& > .dropdown {
			display: inline-flex;
		}
	}
	.menuarea {
		fg(2);
		letter-spacing: 1px;
		text-transform: uppercase;
		brd(0);
		position: absolute;
		right: 0;
		top: 0;

		.content > & {
			top: calc(var(--font-size) * -1 - var(--border-width));
		}

		& > .spacer {
			mar(0);
		}
		.selected {
			box-sizing: border-box;
			flex(inline-flex);

			/.dropdown.lightdrop .selected,
			& {
				normalise-select();
				text-decoration: none $i;
				cursor: pointer;
			}
		}
	}
	.drop-choices {
		bg();
		lnh();
		brd();
		margin-top: 6px $i;
		position: @css { sticky };

		& > .choice {
			fg();
			capitalise();
			pad();

			&:hover {
				hl();
				text-decoration: none;
			}
		}
	}
}

