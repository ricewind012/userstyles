/* ==UserStyle==
@name           Unsplash
@namespace      github.com/openstyles/stylus
@version        1.0.2
@description    A new userstyle
@author         Me

@preprocessor stylus
==/UserStyle== */

// Variables
vendors = official;
$small-screen = 768px;
$select-shadow = inset 0 1px 2px rgba(0, 0, 0, 0.1);
$select-size = 16px;
$i = !important;

// Stylus
svar(var) {
	s('var(--%s)', var);
}

cond(n, yes, no) {
	(n == 0 ? no : yes) $i;
}

sel-cond(sel, pos) {
	pos ? s('%s-%s', sel, pos) : sel;
}

color-a(n, bright = true) {
	s = bright ? -2 : null;
	n = n > 6 ? n - 8 : n;

	s('hsla(var(--color%s-h),	var(--colorscheme-s%s),	var(--colorscheme-l%s), var(--bg-opacity))', n, s, s);
}

// Appearance
bg(n =) {
	background-color: s('var(--bg%s)', n) $i;

	if (n == -tr || n == -tr2 || n == -tr3) {
		backdrop-filter: var(--popup-filter) $i;
	}
}

fg(n =) {
	color: s('var(--fg%s)', n) $i;
}

bgc(n1 =, n2 =) {
	bg(n1);
	fg(n2);
}

hl() {
	background-color: var(--hl) $i;
	color: var(--hl-fg) $i;
}

accent() {
	background-color: var(--accent) $i;
	color: var(--accent-fg) $i;
}

clr(n) {
	color: s('var(--color%s)', n) $i;
}

lnh() {
	line-height: var(--line-height) $i;
}

pad(pos =, n = 1) {
	{sel-cond(padding, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

mar(pos =, n = 1) {
	{sel-cond(margin, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

shd(n) {
	box-shadow: cond(n, s('var(--shadow-%s)', n), none);
}

rad(n = 1) {
	border-radius: cond(n, var(--border-radius), 0);
}

brd(pos =, color = border) {
	if (color) {
		color = svar(color);
	}

	{sel-cond(border, pos)}: \
		(color == 0 ? none : pos == 0 ? none : var(--border-width) solid color) $i;
	if (!pos) {
		rad(pos);
	}
}

// Position
box(w, h = w) {
	width: w $i;
	height: h $i;
}

flex(display = flex, alignment = center, justification =) {
	display: display $i;
	align-items: alignment $i;
	justify-content: justification $i;
}

// Animation
anim(name =, func = ) {
	@media (prefers-reduced-motion: no-preference) {
		{name ? animation : transition}: name var(--trans-dur) func $i;
	}
}

dropfade() {
	anim(dropfade, cubic-bezier(0.2, 0.9, 0.6, 1));
}

// Focus
focus(p = focus) {
	anim();

	&:{p} {
		border-color: var(--hl) $i;
		box-shadow: var(--shadow-ins) var(--hl) $i;
		outline: none $i;
	}
}

header-focus(class = page-focus) {
	.{class} & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}

	// Stylus is unable to recognise :where()
	:root:not(:-moz-window-inactive) & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}
}

// Text
replace-text(content =, text-color = fg, pos = after) {
	color: transparent $i;
	letter-spacing: -9999px $i;

	if (content) { // Replace
		&::{pos} {
			content: content $i;
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	} else { // Hide
		* {
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	}
}

hide-chars(amount, pos, bg =) {
	margin-{pos}: s('-%sch', amount) $i;
	position: relative $i;

	element = pos == left ? before : after;
	&::{element} {
		content: '' $i;
		position: absolute $i;
		inset: 0;
		box(s('%sch', amount), calc(1em * var(--line-height)));
		bg(bg);
	}
}

// Normalisation
disabled() {
	&:disabled {
		opacity: 0.5 $i;
		cursor: not-allowed $i;
	}
}

normalise-select() {
	appearance: none $i;
	bgc(2);
	lnh();
	background-image:
		linear-gradient(55deg, var(--bg2) 43%, transparent 45%),
		linear-gradient(125deg, transparent 53%, var(--bg2) 55%),
		linear-gradient(180deg, var(--bg2) 30%, var(--fg) 30%) $i;
	background-size: 20px 20px $i;
	background-repeat: no-repeat $i;
	background-position: right 50% $i;
	pad();
	padding-right: calc(var(--pad) + 20px) $i;
	brd();
	focus();
	disabled();
}

normalise-input() {
	bgc(2);
	lnh();
	pad();
	brd();
	focus();
	disabled();

	&::placeholder {
		fg(2);
	}
}

normalise-button() {
	bgc(2);
	lnh();
	background-image: none $i;
	padding: var(--pad) calc(var(--pad) * 2) $i;
	brd();
	cursor: pointer $i;
	focus();
	disabled();
}

normalise-color() {
	bg(2);
	pad(0);
	brd();
	box($select-size);
	focus();
	disabled();

	&::-webkit-color-swatch {
		brd(0);
		// Prevent from making it look like a radio input
		border-radius: calc(var(--border-radius) * 0.33) $i;

		&-wrapper {
			pad(0);
		}
	}
}

normalise-checkbox(label = true) {
	if (label) {
		/label {
			lnh();
			flex();
			gap: 1ch $i;
		}
	}

	appearance: none $i;
	bg(2);
	brd();
	// Prevent from making it look like a radio input
	border-radius: calc(var(--border-radius) * 0.33) $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	min-width: $select-size $i;
	focus();

	&::before, &::after {
		content: '';
		position: absolute $i;
		inset: 0;
		background-color: var(--hl) $i;
		transform-origin: 0 0 $i;
	}
	&:disabled {
		&::before, &::after {
			background-color: var(--fg2) $i;
		}
	}

	&::before {
		transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0) $i;
	}
	&:indeterminate::before {
		transform: rotate(0) translateY(37.5%) translateX(10%) scaleX(0.8) scaleY(0.25) $i;
		transition-duration: 33.3ms $i;
	}
	&::after {
		transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(0) $i;
	}

	&:checked {
		&::before {
			transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0.4) $i;
			transition-duration: 33.3ms $i;
		}
		&::after {
			transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(1.2) $i;
			transition-delay: 33.3ms $i;
			anim();
		}
	}
}

normalise-radio() {
	appearance: none $i;
	bg(2);
	brd();
	border-radius: 50% $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	focus();

	&::before {
		content: '';
		position: absolute $i;
		inset: $select-size / 5;
		background-color: var(--hl) $i;
		border-radius: 50% $i;
		transition: transform var(--trans-dur) linear $i;
		transform: scale(0) $i;
	}
	&:disabled::before {
		background-color: var(--fg2) $i;
	}
	&:checked::before {
		transition-timing-function: cubic-bezier(0, 0, 0.3, 1.5) $i;
		transform: scale(1) $i;
		anim();
	}
}

normalise-header(first = true) {
	fg();
	lnh();
	text-transform: uppercase $i;
	letter-spacing: 1px $i;
	pad(0);
	pad(bottom);
	brd(bottom);
	mar(0);
	mar(bottom);
	if (!first) {
		margin-top: calc(var(--pad) * 2) $i;
	}
}

@-moz-document domain("unsplash.com") {
	/**
	 * Remove elements
	**/
	[data-test="client-side-hydration-complete"] > header + div:not([data-test]), // Sticky header
	header > nav > :not(:first-child):not(.hzGh7), // Everything but the logo/search

	a[rel="sponsored"],
	span._1jzuO.Gehj1, // Featured
	figure:has(a[href^="/plus"]), // Unsplash+
	div[style^="--row-gutter"] > div, // Related collections

	[data-test="search-photos-route"] h2, // "Results for..."
	[data-test="page-header-title"], // Page title

	button[title="Clear"], // Clear input
	button[title="Clear"] + div, // ^
	button[title="Add to collection"],
	button[title="Like"],

	[data-test="editorial-route"] > :first-child, // Photo of the day
	#app > div[data-test] > footer, // Footer
	#app > div[data-test] > footer + div, // ^
	[data-test="search-photos-route"] + div // ^
	{
		display: none !important;
	}

	/**
	 * Global
	**/
	body {
		bgc();
		lnh();
	}
	.M5vdR {
		padding: var(--body-pad);
	}

	/**
	 * Header
	**/
	#app > div > header {
		header-focus();
		brd(bottom);

		& > nav {
			/[data-test="search-route"] > div:first-child,
			& {
				bg(2);
				pad(left);
				pad(right);
			}
			& > :first-child {
				margin-right: 20px;
			}
			& > a > svg {
				fill: var(--fg);
			}
		}

		form {
			bg();
			brd();
		}

		/#react-autowhatever-1 {
			bg(-tr);
			pad(0);
			row-gap: 0;
			brd();
			shd(big);

			& > div {
				pad();
			}

			li > div > div {
				normalise-button();

				div[style="width: 8px;"], svg {
					display: none;
				}
			}
		}

		[aria-labelledby="unsplash-home"] + div > span:last-child,
		input::placeholder {
			fg(2);
		}
	}

	/**
	 * Menu
	**/
	button + [role="menu"] > div > div > div {
		bg(-tr);
		brd();
		shd(big);

		div[style="height: 8px;"] {
			display: none;
		}

		[aria-label="Visual search form"] {
			& > div > div > div {
				border-color: var(--fg);
				border-radius: var(--border-radius);

				& > div > div[class] {
					brd(0);
					height: unset;

					& > label {
						display: none;
					}

					input {
						normalise-input();
					}
				}
			}

			button > div > div:first-child {
				display: none;
			}
		}

		h4 {
			margin: auto;

			& + div {
				display: none;
			}
		}

		// IDK what is below
		[download] {
			fg();

			&:hover {
				hl();

				span {
					color: var(--hl-fg) !important;
				}
			}

			&, &:hover {
				transition: none !important;
			}

			span {
				fg(2);
			}
		}

		[style^="border-bottom-color"] {
			border-bottom-color: var(--border) !important;
		}

		hr {
			background-color: var(--border) !important;
			mar(0);
		}
	}
	[id^="popover-search"] > div > div > div > div {
		pad(0);

		li > a[href] {
			padding: var(--pad) 0;
			height: unset;
			transition: none;

			&:hover:not([aria-disabled="true"]) {
				hl();
			}

			& > div {
				margin: 0 calc(var(--pad) * 2);
			}
		}
	}

	[data-test="search-route"] > div:first-child {
		position: unset !important;

		& > div {
			box-shadow: inset 0 -1px var(--accent-border);
		}

		li > a {
			fg();
			padding: 0 var(--pad);
			height: 32px;

			&:hover:not([aria-current]) {
				background-color: var(--accent-border);
			}

			svg {
				fill: var(--fg);
			}

			&[aria-current] {
				bg();
				shd(0);
				brd(,accent-border);
				brd(bottom, 0);
			}
		}

		button[aria-haspopup="true"] span {
			fg();
		}
	}

	// Title
	[data-test="search-route"] > div:nth-child(2) {
		pad(top, 0);
		padding-bottom: calc(var(--pad) * 2) !important;

		& > div {
			margin-top: calc(var(--pad) * 2) !important;
		}
	}
	.FBggh { // top
	brd(0);

		& > a {
			normalise-button();
			flex();
		}
	}

	// Tags
	[data-test="page-header-title"] + div > div::after {
		background-image: linear-gradient(
			90deg,
			transparent 0,
			var(--bg) 90%
		);
	}
	[title="scroll list to the right"]:hover svg {
		fill: var(--fg);
	}
	.mkUrf > div {
		bg(2);
		brd();

		&:hover {
			border-color: var(--hl);

			~/ a, & a {
				color: var(--fg);
			}
		}
	}

	// Image
	[style="--column-gutter:24px;--columns:3"] {
		--column-gutter: var(--pad) $i;
	}
	[style="--row-gutter:24px"] {
		--row-gutter: var(--pad) $i;
	}
	#app figure {
		// Tags
		& > div > div + div a {
			normalise-button();
			margin-top: 1px;
		}

		// Buttons
		[itemprop="contentUrl"] + div button,
		[title="Download photo"] {
			normalise-button();
			height: unset !important;
		}
	}

	// Photo page
	[data-test="photos-route"] {
		& > :first-child > div > div {
			position: unset;
		}

		header {
			bgc(2);
			header-focus();
			brd(bottom);

			div:last-child {
				& > div:not(:last-child) button { // Like photo, add to collections
					display: none;
				}

				& > div:last-child { // Download
					& > div > a[download] {
						background-color: var(--color10);
						border-radius: var(--border-radius) 0 0 var(--border-radius);

						& + div { // Divider
							display: none;
						}
					}
					/#popover-download-button {
						margin-left: -1px;
						height: unset !important;

						button {
							background-color: var(--color10);
							border-radius: 0 var(--border-radius) var(--border-radius) 0;
						}
					}
					& > div > a[download],
					/#popover-download-button button {
						border-color: var(--color2);

						&, &:hover {
							anim();
						}
						&:hover {
							background-color: var(--color2);
						}
					}
				}
			}
		}
	}
}

