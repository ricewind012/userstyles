/* ==UserStyle==
@name           Nitter
@namespace      github.com/openstyles/stylus
@version        1.2.0
@description    A new userstyle
@author         Me

@preprocessor stylus
==/UserStyle== */

// Variables
vendors = official;
$small-screen = 768px;
$select-shadow = inset 0 1px 2px rgba(0, 0, 0, 0.1);
$select-size = 16px;
$i = !important;

// Stylus
svar(var) {
	s('var(--%s)', var);
}

cond(n, yes, no) {
	(n == 0 ? no : yes) $i;
}

sel-cond(sel, pos) {
	pos ? s('%s-%s', sel, pos) : sel;
}

color-a(n, bright = true) {
	s = bright ? -2 : null;
	n = n > 6 ? n - 8 : n;

	s('hsla(var(--color%s-h),	var(--colorscheme-s%s),	var(--colorscheme-l%s), var(--bg-opacity))', n, s, s);
}

// Appearance
bg(n =) {
	background-color: s('var(--bg%s)', n) $i;

	if (n == -tr || n == -tr2 || n == -tr3) {
		backdrop-filter: var(--popup-filter) $i;
	}
}

fg(n =) {
	color: s('var(--fg%s)', n) $i;
}

bgc(n1 =, n2 =) {
	bg(n1);
	fg(n2);
}

hl() {
	background-color: var(--hl) $i;
	color: var(--hl-fg) $i;
}

accent() {
	background-color: var(--accent) $i;
	color: var(--accent-fg) $i;
}

clr(n) {
	color: s('var(--color%s)', n) $i;
}

lnh() {
	line-height: var(--line-height) $i;
}

pad(pos =, n = 1) {
	{sel-cond(padding, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

mar(pos =, n = 1) {
	{sel-cond(margin, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

shd(n) {
	box-shadow: cond(n, s('var(--shadow-%s)', n), none);
}

rad(n = 1) {
	border-radius: cond(n, var(--border-radius), 0);
}

brd(pos =, color = border) {
	if (color) {
		color = svar(color);
	}

	{sel-cond(border, pos)}: \
		(color == 0 ? none : pos == 0 ? none : var(--border-width) solid color) $i;
	if (!pos) {
		rad(pos);
	}
}

// Position
box(w, h = w) {
	width: w $i;
	height: h $i;
}

flex(display = flex, alignment = center, justification =) {
	display: display $i;
	align-items: alignment $i;
	justify-content: justification $i;
}

// Animation
anim(name =, func = ) {
	@media (prefers-reduced-motion: no-preference) {
		{name ? animation : transition}: name var(--trans-dur) func $i;
	}
}

dropfade() {
	anim(dropfade, cubic-bezier(0.2, 0.9, 0.6, 1));
}

// Focus
focus(p = focus) {
	anim();

	&:{p} {
		border-color: var(--hl) $i;
		box-shadow: var(--shadow-ins) var(--hl) $i;
		outline: none $i;
	}
}

header-focus(class = page-focus) {
	.{class} & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}

	// Stylus is unable to recognise :where()
	:root:not(:-moz-window-inactive) & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}
}

// Text
replace-text(content =, text-color = fg, pos = after) {
	color: transparent $i;
	letter-spacing: -9999px $i;

	if (content) { // Replace
		&::{pos} {
			content: content $i;
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	} else { // Hide
		* {
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	}
}

hide-chars(amount, pos, bg =) {
	margin-{pos}: s('-%sch', amount) $i;
	position: relative $i;

	element = pos == left ? before : after;
	&::{element} {
		content: '' $i;
		position: absolute $i;
		inset: 0;
		box(s('%sch', amount), calc(1em * var(--line-height)));
		bg(bg);
	}
}

// Normalisation
disabled() {
	&:disabled {
		opacity: 0.5 $i;
		cursor: not-allowed $i;
	}
}

normalise-select() {
	appearance: none $i;
	bgc(2);
	lnh();
	background-image:
		linear-gradient(55deg, var(--bg2) 43%, transparent 45%),
		linear-gradient(125deg, transparent 53%, var(--bg2) 55%),
		linear-gradient(180deg, var(--bg2) 30%, var(--fg) 30%) $i;
	background-size: 20px 20px $i;
	background-repeat: no-repeat $i;
	background-position: right 50% $i;
	pad();
	padding-right: calc(var(--pad) + 20px) $i;
	brd();
	focus();
	disabled();
}

normalise-input() {
	bgc(2);
	lnh();
	pad();
	brd();
	focus();
	disabled();

	&::placeholder {
		fg(2);
	}
}

normalise-button() {
	bgc(2);
	lnh();
	background-image: none $i;
	padding: var(--pad) calc(var(--pad) * 2) $i;
	brd();
	cursor: pointer $i;
	focus();
	disabled();
}

normalise-color() {
	bg(2);
	pad(0);
	brd();
	box($select-size);
	focus();
	disabled();

	&::-webkit-color-swatch {
		brd(0);
		// Prevent from making it look like a radio input
		border-radius: calc(var(--border-radius) * 0.33) $i;

		&-wrapper {
			pad(0);
		}
	}
}

normalise-checkbox(label = true) {
	if (label) {
		/label {
			lnh();
			flex();
			gap: 1ch $i;
		}
	}

	appearance: none $i;
	bg(2);
	brd();
	// Prevent from making it look like a radio input
	border-radius: calc(var(--border-radius) * 0.33) $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	min-width: $select-size $i;
	focus();

	&::before, &::after {
		content: '';
		position: absolute $i;
		inset: 0;
		background-color: var(--hl) $i;
		transform-origin: 0 0 $i;
	}
	&:disabled {
		&::before, &::after {
			background-color: var(--fg2) $i;
		}
	}

	&::before {
		transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0) $i;
	}
	&:indeterminate::before {
		transform: rotate(0) translateY(37.5%) translateX(10%) scaleX(0.8) scaleY(0.25) $i;
		transition-duration: 33.3ms $i;
	}
	&::after {
		transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(0) $i;
	}

	&:checked {
		&::before {
			transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0.4) $i;
			transition-duration: 33.3ms $i;
		}
		&::after {
			transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(1.2) $i;
			transition-delay: 33.3ms $i;
			anim();
		}
	}
}

normalise-radio() {
	appearance: none $i;
	bg(2);
	brd();
	border-radius: 50% $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	focus();

	&::before {
		content: '';
		position: absolute $i;
		inset: $select-size / 5;
		background-color: var(--hl) $i;
		border-radius: 50% $i;
		transition: transform var(--trans-dur) linear $i;
		transform: scale(0) $i;
	}
	&:disabled::before {
		background-color: var(--fg2) $i;
	}
	&:checked::before {
		transition-timing-function: cubic-bezier(0, 0, 0.3, 1.5) $i;
		transform: scale(1) $i;
		anim();
	}
}

normalise-header(first = true) {
	fg();
	lnh();
	text-transform: uppercase $i;
	letter-spacing: 1px $i;
	pad(0);
	pad(bottom);
	brd(bottom);
	mar(0);
	mar(bottom);
	if (!first) {
		margin-top: calc(var(--pad) * 2) $i;
	}
}

@-moz-document domain("nitter.net"), domain("nitter.unixfox.eu"), domain("nitter.namazso.eu") {
	/**
	 * Global
	**/
	:root {
		--accent_bg: var(--accent);
	}
	body {
		--bg_color: var(--bg);
		--bg_panel: var(--bg2);
		--bg_elements: var(--bg2);
		--bg_overlays: var(--bg2);
		--bg_hover: var(--bg2);

		--accent: var(--accent_bg);
		--accent_light: var(--accent);
		--accent_dark: var(--accent);
		--accent_border: var(--accent-border);

		--fg_color: var(--fg);
		--fg_faded: var(--fg2);
		--fg_dark: var(--fg2);
		--fg_nav: var(--fg2);
		--more_replies_dots: var(--fg2);
		--error_red: var(--color9);
		--verified_blue: var(--color12);
		--icon_text: var(--fg);
		--tab: var(--fg2);
		--tab_selected: var(--accent);
		--profile_stat: var(--fg);

		--grey: var(--fg2);
		--dark_grey: var(--bg);
		--border_grey: var(--border);
		--play_button: var(--fg2);
		--play_button_hover: var(--fg);

		lnh();
	}

	a {
		color: var(--fg-link);
	}
	button {
		normalise-button();
	}

	/**
	 * Hide elements
	**/
	[href="https://liberapay.com/zedeus"],
	.inner-nav > a,
	.top-ref
	{
		display: none;
	}

	/**
	 * Header
	**/
	nav {
		bg(2);
		brd(bottom);
		header-focus();
		shd(0);

		/.inner-nav, & {
			height: var(--header-h);
		}
	}

	/**
	 * Content
	**/

	// Global
	.container {
		padding-top: var(--header-h);
	}
	.timeline-item {
		pad();

		&:not(:first-child) {
			brd(top);
		}
	}
	.username {
		margin-left: 1ch;
	}
	.attachments {
		border-radius: var(--border-radius);
		mar(top);
	}

	// Timeline
	.profile-tabs .timeline-container {
		brd();
		width: calc(68% - var(--border-width) * 2) $i;
	}
	.profile {
		&-banner {
			mar(bottom);
		}

		&-tab {
			pad(0);
			mar(right);
			max-width: calc(32% - var(--pad));

			&.sticky {
				position: sticky;
			}

			& > div {
				brd();
			}
		}
		&-card {
			pad();

			&-extra {
				mar(top);

				&-links {
					mar(top);
				}
			}
		}
		&-joindate {
			mar(0);
		}
	}
	.photo-rail {
		&-card {
			pad();
			brd(top);
			width: calc(100% - var(--pad) * 2 - var(--border-width) * 2);
		}
		&-header {
			normalise-header();

			& > a {
				fg();
			}
		}
		&-grid {
			grid-gap: calc(var(--pad) / 2);
			pad(0);

			& > a, img {
				border-radius: var(--border-radius);
			}
		}
	}
	.tab {
		brd(bottom);
		mar(0);

		&-item {
			a {
				pad();

				&:hover {
					fg();
				}
			}
			&.active a {
				hl();
				border-color: transparent;
			}
		}
	}
	.tweet {
		/.more-replies-text,
		/.unavailable-box,
		&-body {
			margin-left: calc(48px + var(--pad));
		}
		&-header {
			mar(bottom);
		}
		&-date {
			margin-left: 1ch;
		}

		&-content {
			lnh();
		}

		&-stat {
			pad(0);
			mar(top);
			margin-right: 1ch $i;

			&s {
				lnh();
				mar(0);
			}
		}
	}
	.card {
		margin: var(--pad) 0;

		&-container {
			bg();
			brd();
		}
		&-title {
			normalise-header();
		}
		&-description {
			mar(0);
			mar(bottom);
		}
	}

	// Tweet
	.conversation {
		brd(left);
		brd(right);
		mar(top);
		mar(bottom);
	}
	.thread-line {
		.timeline-item,
		.more-replies {
			&::before {
				mar(left, 0);
				width: 3px;
				left: 24px;
			}
		}
	}
	.main-thread {
		brd(top);

		/.reply, & {
			brd(bottom);
			mar(0);
		}
	}
	.unavailable-box {
		bg(2);
		pad(0);
		brd(0);

		/.more-replies-text, & {
			pad(top);
			pad(bottom);
		}
	}

	// Settings
	.overlay-panel {
		pad();
		brd();
		margin: var(--body-pad) auto;
	}
	fieldset {
		margin-top: calc(var(--pad) * -2);
	}
	legend {
		normalise-header(false);
	}
	.note {
		padding: var(--pad) 0;
		brd(top);
		brd(bottom);
		margin: var(--pad) 0;

		&::before {
			content: 'NOTE: ';
		}
	}
	.pref-group {
		margin-bottom: calc(var(--pad) / 2) $i;
		flex(,,space-between);
	}
	button, select, input[type="text"] {
		--bg2: var(--bg);
		position: unset $i;
	}
	.preferences button {
		mar(0);
	}
	select {
		normalise-select();
		height: unset;
	}
	input[type="text"] {
		normalise-input();
	}
	.checkbox {
		bg();
		brd();
		focus();
	}
}

