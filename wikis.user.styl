/* ==UserStyle==
@name           Wikis
@namespace      github.com/openstyles/stylus
@version        1.0.0
@description    A new userstyle
@author         Me

@preprocessor stylus
==/UserStyle== */

// Variables
vendors = official;
$small-screen = 768px;
$select-shadow = inset 0 1px 2px rgba(0, 0, 0, 0.1);
$select-size = 16px;
$i = !important;

// Stylus
svar(var) {
	s('var(--%s)', var);
}

cond(n, yes, no) {
	(n == 0 ? no : yes) $i;
}

sel-cond(sel, pos) {
	pos ? s('%s-%s', sel, pos) : sel;
}

color-a(n, bright = true) {
	s = bright ? -2 : null;
	n = n > 6 ? n - 8 : n;

	s('hsla(var(--color%s-h),	var(--colorscheme-s%s),	var(--colorscheme-l%s), var(--bg-opacity))', n, s, s);
}

// Appearance
bg(n =) {
	background-color: s('var(--bg%s)', n) $i;

	if (n == -tr || n == -tr2 || n == -tr3) {
		backdrop-filter: var(--popup-filter) $i;
	}
}

fg(n =) {
	color: s('var(--fg%s)', n) $i;
}

bgc(n1 =, n2 =) {
	bg(n1);
	fg(n2);
}

hl() {
	background-color: var(--hl) $i;
	color: var(--hl-fg) $i;
}

accent() {
	background-color: var(--accent) $i;
	color: var(--accent-fg) $i;
}

clr(n) {
	color: s('var(--color%s)', n) $i;
}

lnh() {
	line-height: var(--line-height) $i;
}

pad(pos =, n = 1) {
	{sel-cond(padding, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

mar(pos =, n = 1) {
	{sel-cond(margin, pos)}: \
		(n == 0 ? 0 : pos == 0 ? 0 : var(--pad)) $i;
}

shd(n) {
	box-shadow: cond(n, s('var(--shadow-%s)', n), none);
}

rad(n = 1) {
	border-radius: cond(n, var(--border-radius), 0);
}

brd(pos =, color = border) {
	if (color) {
		color = svar(color);
	}

	{sel-cond(border, pos)}: \
		(color == 0 ? none : pos == 0 ? none : var(--border-width) solid color) $i;
	if (!pos) {
		rad(pos);
	}
}

// Position
box(w, h = w) {
	width: w $i;
	height: h $i;
}

flex(display = flex, alignment = center, justification =) {
	display: display $i;
	align-items: alignment $i;
	justify-content: justification $i;
}

// Animation
anim(name =, func = ) {
	@media (prefers-reduced-motion: no-preference) {
		{name ? animation : transition}: name var(--trans-dur) func $i;
	}
}

dropfade() {
	anim(dropfade, cubic-bezier(0.2, 0.9, 0.6, 1));
}

// Focus
focus(p = focus) {
	anim();

	&:{p} {
		border-color: var(--hl) $i;
		box-shadow: var(--shadow-ins) var(--hl) $i;
		outline: none $i;
	}
}

header-focus(class = page-focus) {
	.{class} & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}

	// Stylus is unable to recognise :where()
	:root:not(:-moz-window-inactive) & {
		--bg2: var(--accent);
		--fg: var(--accent-fg);
		--border: var(--accent-border);
	}
}

// Text
replace-text(content =, text-color = fg, pos = after) {
	color: transparent $i;
	letter-spacing: -9999px $i;

	if (content) { // Replace
		&::{pos} {
			content: content $i;
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	} else { // Hide
		* {
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	}
}

hide-chars(amount, pos, bg =) {
	margin-{pos}: s('-%sch', amount) $i;
	position: relative $i;

	element = pos == left ? before : after;
	&::{element} {
		content: '' $i;
		position: absolute $i;
		inset: 0;
		box(s('%sch', amount), calc(1em * var(--line-height)));
		bg(bg);
	}
}

// Normalisation
disabled() {
	&:disabled {
		opacity: 0.5 $i;
		cursor: not-allowed $i;
	}
}

normalise-select() {
	appearance: none $i;
	bgc(2);
	lnh();
	background-image:
		linear-gradient(55deg, var(--bg2) 43%, transparent 45%),
		linear-gradient(125deg, transparent 53%, var(--bg2) 55%),
		linear-gradient(180deg, var(--bg2) 30%, var(--fg) 30%) $i;
	background-size: 20px 20px $i;
	background-repeat: no-repeat $i;
	background-position: right 50% $i;
	pad();
	padding-right: calc(var(--pad) + 20px) $i;
	brd();
	focus();
	disabled();
}

normalise-input() {
	bgc(2);
	lnh();
	pad();
	brd();
	focus();
	disabled();

	&::placeholder {
		fg(2);
	}
}

normalise-button() {
	bgc(2);
	lnh();
	background-image: none $i;
	padding: var(--pad) calc(var(--pad) * 2) $i;
	brd();
	cursor: pointer $i;
	focus();
	disabled();
}

normalise-color() {
	bg(2);
	pad(0);
	brd();
	box($select-size);
	focus();
	disabled();

	&::-webkit-color-swatch {
		brd(0);
		// Prevent from making it look like a radio input
		border-radius: calc(var(--border-radius) * 0.33) $i;

		&-wrapper {
			pad(0);
		}
	}
}

normalise-checkbox(label = true) {
	if (label) {
		/label {
			lnh();
			flex();
			gap: 1ch $i;
		}
	}

	appearance: none $i;
	bg(2);
	brd();
	// Prevent from making it look like a radio input
	border-radius: calc(var(--border-radius) * 0.33) $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	min-width: $select-size $i;
	focus();

	&::before,
	&::after {
		content: '';
		position: absolute $i;
		inset: 0;
		background-color: var(--hl) $i;
		transform-origin: 0 0 $i;
	}
	&:disabled {
		&::before,
		&::after {
			background-color: var(--fg2) $i;
		}
	}

	&::before {
		transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0) $i;
	}
	&:indeterminate::before {
		transform: rotate(0) translateY(37.5%) translateX(10%) scaleX(0.8) scaleY(0.25) $i;
		transition-duration: 33.3ms $i;
	}
	&::after {
		transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(0) $i;
	}

	&:checked {
		&::before {
			transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0.4) $i;
			transition-duration: 33.3ms $i;
		}
		&::after {
			transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(1.2) $i;
			transition-delay: 33.3ms $i;
			anim();
		}
	}
}

normalise-radio() {
	appearance: none $i;
	bg(2);
	brd();
	border-radius: 50% $i;
	box-shadow: $select-shadow $i;
	mar(0);
	position: relative $i;
	box($select-size);
	focus();

	&::before {
		content: '';
		position: absolute $i;
		inset: $select-size / 5;
		background-color: var(--hl) $i;
		border-radius: 50% $i;
		transition: transform var(--trans-dur) linear $i;
		transform: scale(0) $i;
	}
	&:disabled::before {
		background-color: var(--fg2) $i;
	}
	&:checked::before {
		transition-timing-function: cubic-bezier(0, 0, 0.3, 1.5) $i;
		transform: scale(1) $i;
		anim();
	}
}

normalise-header(first = true) {
	fg();
	lnh();
	text-transform: uppercase $i;
	letter-spacing: 1px $i;
	pad(0);
	pad(bottom);
	brd(bottom);
	mar(0);
	mar(bottom);
	if (!first) {
		margin-top: calc(var(--pad) * 2) $i;
	}
}

@-moz-document \
	regexp("^https?://wiki\..*"),
	regexp("^https?://\w+\.wikipedia.org/wiki/.*\?useskin=vector$")
{
	/**
	 * Global
	**/
	* {
		box-sizing: border-box $i;
	}
	body {
		bg();
		--sidebar-width: 228px;
	}
	a {
		fg(-link);
	}
	#mw {
		&-page-base {
			background: var(--bg) none;
		}
	}
	.mw {
		&-body {
			bgc();
			padding: var(--body-pad) $i;
			brd(0);
			margin-left: var(--sidebar-width) $i;
		}
		&-content-container {
			max-width: unset $i;
		}
		&-header {
			margin-left: var(--sidebar-width);
		}
		&-list-item {
			lnh();
			pad(0);
		}
		&-page-container {
			pad(0);
			max-width: unset $i;

			&-inner {
				display: block $i;
			}
		}
	}
	.vector {
		&-body {
			lnh();
		}
		&-menu {
			pad(0);
			mar(0);

			&-heading {
				normalise-header(false);
				background: none $i;
				display: block $i;
			}
			&-content {
				mar(0);

				&-list {
					pad(0);
				}
			}
		}
		&-sticky-toc-container {
			pad(0);
			mar(0);
		}
	}
	.rt-tooltip {
		bgc(2);
		lnh();
		brd();
		shd(big);
		dropfade();

		&Content {
			mar(0);
			pad();
		}
		&Tail {
			background-image: linear-gradient(
				to top right,
				var(--border) 50%,
				transparent 50%
			)

			&::after {
				bg(2);
			}
		}
	}
	h2 {
		normalise-header();
	}
	li {
		mar(0);
	}
	#p-logo {
		margin: auto;
		display: none;
	}
	#left-navigation {
		margin-left: calc(var(--sidebar-width) + var(--body-pad));
	}

	/**
	 * Hide elements
	**/
	#p-logo,
	#p-personal,
	#p-lang > .uls-settings-trigger,

	#vector-toc-collapsed-button, .toctoggle, .toctogglespan,
	#firstHeading, #siteSub, #contentSub, #contentSub2,
	.mw-editsection,
	.rt-settingsLink,
	#footer,
	{
		display: none;
	}

	/**
	 * Sidebar
	**/
	#mw-panel {
		top: calc(50% + var(--header-h) / 2) $i;

		&::-webkit-scrollbar {
			display: none;
		}

		&,
		&-toc {
			bg(2);
			pad();
			brd(0);
			brd(right);
			mar(0);
			overflow: hidden scroll $i;
			display: block $i;
			position: fixed $i;
			left: 0 $i;
			box(var(--sidebar-width), calc(50% - var(--header-h) / 2));
		}
		&-toc {
			brd(bottom);
			top: var(--header-h) $i;

			&::after {
				display: none $i;
			}
		}
	}
	#toc {
		@extend #mw-panel
		@extend #mw-panel-toc

		&title {
			text-align: left $i;
		}
		&toggle {
			&,
			&span {
				display: one
			}
		}

		h2 {
			display: block;
		}
	}
	.toc {
		&title {
			text-align: left $i;
		}
		&number {
			fg();

			&::after {
				content: '.';
			}
		}

		ul ul {
			margin-left: 1.5em $i;
		}
	}
	#p-navigation-label {
		mar(top, 0);
	}
	.sidebar-toc {
		&-header {
			normalise-header();
		}
		&-title {
			fg();
		}
		&-list,
		&-contents {
			lnh();
		}
		&-text {
			pad(0);
		}
		&-numb::after {
			content: '.';
		}
		&-list-item:not(&-level-1) {
			padding-left: 1.5em $i;
		}
	}
}

@-moz-document domain("wiki.archlinux.org") {
	// Global
	a:not(.new) {
		#content &,
		#footer &,
		header.mw-header li:not(.new) &,
		#mw-navigation li:not(.new) &,
		#mw-panel li:not(.new) &,
		#column-one li:not(.new) & {
			&,
			&:hover,
			&:active:hover {
				fg(-link);
			}
		}
	}
	#mw {
		// Sidebar
		&-sidebar-button {
			display: none;
		}
	}
}
